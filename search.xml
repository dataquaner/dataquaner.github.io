<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器学习系列之决策树算法（05）：梯度提升树算法GBDT</title>
      <link href="/2019/12/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95%EF%BC%8805%EF%BC%89%EF%BC%9A%E6%A2%AF%E5%BA%A6%E6%8F%90%E5%8D%87%E6%A0%91%E7%AE%97%E6%B3%95GBDT/"/>
      <url>/2019/12/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95%EF%BC%8805%EF%BC%89%EF%BC%9A%E6%A2%AF%E5%BA%A6%E6%8F%90%E5%8D%87%E6%A0%91%E7%AE%97%E6%B3%95GBDT/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>前面讲述了<a href="https://dataquaner.github.io/2019/12/17/机器学习系列之决策树算法（01）：决策树特征选择/">《决策树的特征选择》</a>、<a href="https://dataquaner.github.io/2019/12/19/机器学习系列之决策树算法（02）：决策树的生成/">《决策树的生成》</a>、<a href="https://dataquaner.github.io/2019/12/19/机器学习系列之决策树算法（03）：决策树的剪枝/">《决策树的剪枝》</a>，熟悉了单棵决策树的的实现细节，在实际应用时，往往采用多棵决策树组合的形式完成目标任务。那么如何组合单棵决策树可以使得模型效果更优呢？目前主要有两种思想：<strong>bagging</strong>和<strong>boosting</strong>，分别对应的典型算法<strong>随机森林</strong>和<strong>Adaboost</strong>、<strong>GBDT</strong>等。</p><blockquote><p><strong>Bagging</strong>的思想比较简单，即每一次从原始数据中根据<strong>均匀概率分布有放回的抽取和原始数据大小相同的样本集合</strong>，样本点可能出现重复，然后对每一次产生的训练集构造一个分类器，再对分类器进行组合。典型实现算法<strong>随机森林</strong></p><p><strong>boosting</strong>的每一次抽样的<strong>样本分布都是不一样的</strong>。每一次迭代，都根据上一次迭代的结果，<strong>增加被错误分类的样本的权重</strong>，使得模型能在之后的迭代中更加注意到难以分类的样本，这是一个<strong>不断学习的过程，也是一个不断提升</strong>的过程，这也就是boosting思想的本质所在。迭代之后，将每次迭代的基分类器进行集成。那么如何进行样本权重的调整和分类器的集成是我们需要考虑的关键问题。典型实现算法是<strong>GBDT</strong></p></blockquote><p>boosting的思想如下图：</p><p><img alt="boosting思想" data-src="https://pic4.zhimg.com/80/v2-aca3644ddd56abe1e47c0f45601587c3_hd.jpg" class="lazyload"></p><p>基于boosting思想的经典算法是<strong>Adaboost</strong>和<strong>GBDT</strong>。关于Adaboost的介绍可以参考《Adaboost算法》，本文重点介绍GBDT。</p><h2 id="2-什么是GBDT"><a href="#2-什么是GBDT" class="headerlink" title="2 什么是GBDT"></a>2 什么是GBDT</h2><blockquote><p>GBDT(Gradient Boosting Decision Tree) 是一种迭代的决策树算法，是<strong>回归树</strong>，而不是分类树。该算法由多棵决策树组成，所有树的结论累加起来做最终答案。它在被提出之初就和SVM一起被认为是泛化能力较强的算法。</p><p>GBDT的思想使其具有天然优势可以发现多种有区分性的特征以及特征组合。业界中，Facebook使用其来自动发现有效的特征、特征组合，来作为LR模型中的特征，以提高 CTR预估（Click-Through Rate Prediction）的准确性。</p></blockquote><p>GBDT用来做回归预测，调整后也可以用于分类。Boost是”提升”的意思，一般Boosting算法都是一个迭代的过程，每一次新的训练都是为了改进上一次的结果。具体训练过程如下图示意：</p><p><img alt="GBDT训练过程" data-src="https://pic2.zhimg.com/80/v2-4713a5b63da71ef5afba3fcd3a65299d_hd.jpg" class="lazyload"></p><h2 id="3-GBDT算法原理"><a href="#3-GBDT算法原理" class="headerlink" title="3 GBDT算法原理"></a>3 GBDT算法原理</h2><p>GBDT算法的核心思想</p><blockquote><p>GBDT的核心就在于：<strong>每一棵树学的是之前所有树结论和的残差</strong>，这个残差就是一个加预测值后能得真实值的累加量。即所有弱分类器相加等于预测值，下一个弱分类器去拟合误差函数对预测值的梯度。</p></blockquote><blockquote><p>GBDT加入了简单的<strong>数值优化</strong>思想。</p><p><strong>Xgboost</strong>更加有效应用了数值优化。相比于gbdt，最重要是对损失函数变得更复杂。目标函数依然是所有树想加等于预测值。损失函数引入了一阶导数，二阶导数。</p><p>不同于随机森林所有树的预测求均值，GBDT所有的树的预测值加起来是最终的预测值，可以不断接近真实值。</p></blockquote><p>GBDT也是集成学习Boosting家族的成员，但是却和传统的Adaboost有很大的不同。回顾下Adaboost，是利用前一轮迭代弱学习器的误差率来更新训练集的权重，这样一轮轮的迭代下去。GBDT也是迭代，使用了前向分布算法，但是弱学习器限定了只能使用CART回归树模型，同时迭代思路和Adaboost也有所不同。</p><p>在GBDT的迭代中，假设我们前一轮迭代得到的强学习器是ft−1(x), 损失函数是L(y,ft−1(x)), 我们本轮迭代的目标是找到一个CART回归树模型的弱学习器ht(x)，让本轮的损失损失L(y,ft(x)=L(y,ft−1(x)+ht(x))最小。也就是说，本轮迭代找到决策树，要让样本的损失尽量变得更小。</p><p>GBDT的思想的通俗解释</p><blockquote><p>假如有个人30岁，</p><p>第一棵树，我们首先用20岁去拟合，发现损失有10岁，</p><p>第二颗，这时我们用6岁去拟合剩下的损失，发现差距还有4岁，</p><p>第三颗，我们用3岁拟合剩下的差距，差距就只有一岁了。</p><p><strong>三棵树加起来为29岁，距离30最近。</strong></p></blockquote><p>从上面的例子看这个思想还是蛮简单的，但是有个问题是这个损失的拟合不好度量，损失函数各种各样，怎么找到一种通用的拟合方法呢？</p><h2 id="4-负梯度拟合"><a href="#4-负梯度拟合" class="headerlink" title="4 负梯度拟合"></a>4 <strong>负梯度拟合</strong></h2><p>在上一节中，我们介绍了GBDT的基本思路，但是没有解决<strong>损失函数拟合方法</strong>的问题。针对这个问题，大牛<strong>Freidman</strong>提出了用损失函数的负梯度来拟合本轮损失的近似值，进而拟合一个CART回归树。第t轮的第i个样本的损失函数的负梯度表示为</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyMP27fEskIYa0Y00VyUqTGZLvXic6rwLTApiaqawpGBqoY1b4zNNTGwAw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>利用(xi,rti)(i=1,2,..m),我们可以拟合一颗CART回归树，得到了第t颗回归树，其对应的叶节点区域Rtj,j=1,2,…,J。其中J为叶子节点的个数。</p><p>针对每一个叶子节点里的样本，我们求出使损失函数最小，也就是拟合叶子节点最好的的输出值ctj如下：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyCHtHNTNtpZHNxboDKqMzy43MyLicZFOt8A46iajZMSHbEAW4UEMeoIhw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>这样就得到了本轮的决策树拟合函数如下：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8ly8Wty7SEqX3Z7MNpiaArS5uNYUu53sb4dp7TsHQMe5Rraw2ZjtbmH84g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>从而本轮最终得到的强学习器的表达式如下：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyOz13MCp5uicnZkqmXQpMubJAuFndxSJ7fzycvBicyZdwnDgoez4ZXbBQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>通过损失函数的负梯度来拟合，找到了一种通用的拟合损失误差的办法，这样无轮是分类问题还是回归问题，我们通过其损失函数的负梯度的拟合，就可以用GBDT来解决我们的分类回归问题。区别仅仅在于损失函数不同导致的负梯度不同而已。</p><p>传统模型中，我们定义一个固定结构的函数，然后通过样本训练拟合更新该函数的参数，获得最后的最优函数。</p><p>GBDT提升树并非如此。它是加法模型，是不定结构的函数，通过不断加入新的子函数来使得模型能更加拟合训练数据，直到最优。函数更新的迭代方式可以写作：<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOHhkSYuFVakKkzs8bV1G1x0kTAtekib1cxFnKxQ6Kic59f53ckjEnM8MQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">)。所以如果要更快逼近最优的函数，我们就需要在正确的方向上添加子函数，这个“正确的方向”当然就是损失减少最快的方向。所以我们需要用损失函数<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOvzmypoOy2AgFtciavA7xoa2n0JWZd5X30lGibWLBSYHR4Mp3vQXc24xA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">)对函数<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOq82zrPJcdR69oOdqjadV52MHoDXRUA3ickHfwRPMLwD8DJINtj20Fpg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">)求导（注意不是对x求导），求得的导数，就是接下来<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOq82zrPJcdR69oOdqjadV52MHoDXRUA3ickHfwRPMLwD8DJINtj20Fpg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">)需要弥补的方向。在上式中<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOwoQiciaNbtJwTJcKw0EcEwuEwkBAnh9cp72mIAFhOfXM5Wk86ywWorYg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">就是表示导数的拟合。</p><p>导数值跟损失函数的选择有关系。如果选择平方损失误差<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOS3I0b3IJ8V0xxjVob1ol6YvFKklAOsnqa1HlIdFicbPuzsnFfd9hPDg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">，那么它的导数就是：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOh5pz5Hy4euGM4ohUKWRQAAQn3z1l3QE7I1OCfrqGnbPo0rGBic8L2Vw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>令人惊喜的是这正是真实值和估计值之间的残差！ 这就是为什么谈到GBDT的时候，很多文章都提到“残差”的拟合，却没有说“梯度”的拟合。其实它们在平方损失误差条件下是一个意思！BTW，上面之所以用了<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOu0blrBa87g5KTo3JKNJG3bISFc303NjWothbmK3SsSs5ibIUn3nIH9g/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">是为了计算方便，常数项并不会影响平方损失误差，以及残差的比较。</p><p>现在让我们重新理解这个式子：<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOHhkSYuFVakKkzs8bV1G1x0kTAtekib1cxFnKxQ6Kic59f53ckjEnM8MQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>1）先求取一个拟合函数Fm-1(x)</p><p>2）用Fm-1(x)进行预测，计算预测值和实际值的残差</p><p>3）为了弥补上面的残差，用一个函数△F(x)来拟合这个残差</p><p>4）这样最终的函数就变成了<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOHhkSYuFVakKkzs8bV1G1x0kTAtekib1cxFnKxQ6Kic59f53ckjEnM8MQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">)，其中Fm-1(x)用来拟合原数据，△F(x)用来拟合残差</p><p>5）如果目前还有较大的残差，则循环2)~4)，更新函数到Fm+1(x) , Fm+2(x), …..直到残差满足条件。</p><p>针对以上流程，我们用实例来说明</p><h2 id="5-提升树的生成过程"><a href="#5-提升树的生成过程" class="headerlink" title="5 提升树的生成过程"></a><strong>5 提升树的生成过程</strong></h2><p>有以下数据需要用回归，并要求平方损失误差小于0.2（这0.2就是我们人为设置的最优条件，否则训练可能会无休止地进行下去）时，可以停止建树：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcO5GxKf7OxmtUG46swUJwHNyUFv8VOOpj0ShaibKVlPciaPk7lk6O9l4DA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p><strong>第一棵树</strong></p><p><strong>1） 遍历各个切分点s=1.5,2.5,…,9.5找到平方损失误差最小值的切分点：</strong></p><p>比如s=1.5,分割成了两个子集：<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOQeodYeygMxPDwt2E8fP7ic0rwiatLYvcag6VOas4WOvDxeA7H0bxHxiag/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"> 通过公式<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOXTFAGhmwVnVjIAib047xJn00uibicmZcZjxq5YKy6olDr62Eac625L0tA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">求平方损失误差</p><p>而其中<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOAvj5NaNw2gmlQ76SqdDOFpTycMKHRr3cyFlpMnWaJT3eF6HpHE54pQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">)为各自子集的平均值<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcO8o2CmsIo8IgPBCRHeMeibaUsrWlfYUn1E72DQOdbq86GibuXhBRQJW2w/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">时，可以使得每个子集的平方损失误差最小。</p><p>求平均值为：<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOiaYE1zAZnMhO7xiayKZvQmDWFrepYQWftLc2NB5b6LuXpd289gvQOGFw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">)，进而求得平方损失误差为<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOZ1zYYIfBrETSG24JJyLwUYqWqVeIz7TV0l1Rn5DtQCfiaMiaBQUfkjuA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>同样的方法求得其它切分点的平方损失误差，列表入下：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOvkj8fRtjicJNMdXIKRDpUawqevqdwWQSYgiamJTY2hcT7KESYOlW8EnA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>可见，当s=6.5时,<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOxveLkvcSxckAMlbqx4I6xtfnEOd8EL9IjZE8DXwCkpqWicR1aAf1MEw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">为所有切分点里平方损失误差最小的</p><p><strong>2) 选择切分点s=6.5构建第一颗回归树，各分支数值使用</strong></p><p><em><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOCng6RAzOkxCibd02ZnfLXHapLY1rxGWJiaXIA1vVyB5VvtBibiadZCvibkw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">：</em></p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcO0sGV4htSbcmYA79VtOVKIick610xGZfoOyIWePX3FOT75yn6j551Uog/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p><strong>第一轮</strong>过后，我们提升树为:</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOsDfeU5cr9IsT5c1rgN8mnibodsaT6KkiaPB67thj2dZrvvCm7828ocjA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p><strong>3) 求提升树拟合数据的残差和平方损失误差：</strong></p><p>提升树拟合数据的残差计算：<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOTRzru4dDaCMSFjszEicw3ibPgTKobG5jQL71BISIUeiciasnFUicqKic4E0A/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>各个点的计算结果：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOQYbumw3ZlTVFWP9ZzXcMkoazH2F75AoQZYWxkdPtpfh8IE9uPibRV4g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>提升树拟合数据的平方损失误差计算：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcO3M9WFJP7O5lJsyW8F5ajrLeOiak5iaRsBylu9NT3uIhSNqC6FRw80rqQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>大于0.2，则还需要继续建树。</p><p><strong>第二棵树</strong></p><p><strong>4) 确定需要拟合的训练数据为上一棵树的残差：</strong></p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOQYbumw3ZlTVFWP9ZzXcMkoazH2F75AoQZYWxkdPtpfh8IE9uPibRV4g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p><strong>5） 遍历各个切分点s=1.5,2.5,…,9.5找到平方损失误差最小值的切分点：</strong></p><p>同样的方法求得其它切分点的平方损失误差，列表入下：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOAnbNhuZUsHQHo0F7GVl0GU3Michbmyia3b8iatic03xJ4mOdMIouPqmRyg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>可见，当s=3.5时,<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOX0uGb3louwe22OkRoQdbd3nk722bLU9WuNnFscqq5H3TlXxrjkfhVg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">为所有切分点里平方损失误差最小的</p><p><strong>6) 选择切分点s=3.5构建第二颗回归树，各分支数值使用</strong></p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOjJLm5bHOFULrY4xFYZZzWlfnENVicnxhQYOiaTd3hOWJJjIgt4cXibPwA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOamWhe3GALv8PnuCOca6w70P1lzYjY25KRYrWjVMwY6Pxn11QSwH6fg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>第二轮过后，我们提升树为:</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOYeITOyhABGetdc4z7STdupyzS9fuFa6v95NjpP5he9nzecPDVKOVLA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p><strong>7) 求提升树拟合数据的残差和平方损失误差：</strong></p><p>提升树拟合数据的残差计算：<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOlmY5ic3Nfg5VPRFVSeup8xjGudqGdAzI3j5bNWslcRR62AxV2XRYKqQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>各个点的计算结果，同时对比初始值和上一颗树的残差：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOt6HhibiciaSQazVLKP3lv4kLvzLF5wfaV2nuCYohOJEU2VkI4WgnZC74w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>可以看见，随着树的增多，残差一直在减少。</p><p>到目前为止，提升树拟合数据的平方损失误差计算：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcO5Rzh6ibyicU5VfBHyhsePVC2wQ8LlJeDn8jWcWicKNiarRWtzSF5uprFhg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>多说一句，这里是从全局提升树的角度去计算损失，其实和上面第5）步中从最后一颗树的角度去计算损失，结果是一样的</p><p>目前损失大于0.2的阈值，还需要继续建树</p><p>… </p><p>… </p><p><strong>第六棵树</strong></p><p>到第六颗树的时候，我们已经累计获得了：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOsh5duEdgszicGk8UbiafAta5NnHyMNVLYOAiaT0Ju4DLGKibDYPteXYBUA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">     <img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOUVO2SLfYFcibbOuMyHjICibYBh2EJrIict8lrtBTZWmfCaBFVE628Lypw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOr1ChtQiaO9CXxNCCGSjUDHrz1iayesKv8vMSCGiavrcJhsRXfSyCicJ30A/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">     <img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcODicRF1aptDuvhgKNadZHkhGOsIre4xibUuG60I4miaUkw5LNfo71gS9xw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>此时提升树为：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOv42KBJrAXur7luickhNHjCagFicZAiaTspyoEaibwhNRz2vr5EjibCjSctg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>此时用<img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOiaxnBL9gfbJ7zfDblcMKKgbwsm6iaTbnfR1MGsva6fJ6ypBUkT9poxUw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">拟合训练数据的平方损失误差为：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOQR444ODwtuSps7BDcbJGPXg70DVN6u5kHLojyQ9qprb27slQnbDV9A/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>平方损失误差小于0.2的阈值，停止建树。</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/mqaP0ypnYKjPEIdtO1Jevr25pRyOXYcOiaxnBL9gfbJ7zfDblcMKKgbwsm6iaTbnfR1MGsva6fJ6ypBUkT9poxUw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload">为我们最终所求的提升树。</p><h2 id="6-回归算法"><a href="#6-回归算法" class="headerlink" title="6 回归算法"></a>6 回归算法</h2><p><strong>输入：</strong> 最大迭代次数T, 损失函数L，训练样本集</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyodcqQg8f6LDBSria8Wa2zKKrJ313X0ulTbVHBx2cCNwBqdaQWWrT5ug/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p><strong>输出：</strong> 强学习器f(x)</p><p><strong>1）</strong> 初始化弱学习器</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyNt6z0iafAWflN2BF8dBd4nlZNC5icuhiaoyAeqQxmur7BN4SEp7cN3k1w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p><strong>2）</strong>对迭代轮数t=1,2,…T有：</p><p>　  <strong>a)</strong> 对样本i=1,2，…m，计算负梯度</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyMP27fEskIYa0Y00VyUqTGZLvXic6rwLTApiaqawpGBqoY1b4zNNTGwAw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>　  <strong>b)</strong> 利用(xi,rti)(i=1,2,..m), 拟合一颗CART回归树,得到第t颗回归树，其对应的叶子节点区域为Rtj,j=1,2,…,J。其中J为回归树t的叶子节点的个数。</p><p>　 <strong>c)</strong> 对叶子区域j =1,2,..J,计算最佳拟合值</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyobJ7nYicsGlUQibywvuCuXXYEIo2XNIVF6Qtz5FeQFaMGFCqYnSnYcSQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>   <strong>(d)</strong> 更新强学习器</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyOz13MCp5uicnZkqmXQpMubJAuFndxSJ7fzycvBicyZdwnDgoez4ZXbBQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p><strong>3）</strong> 得到强学习器f(x)的表达式</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyB0YrMT8hPj4HkNiacdM1iaBIXQgRP1YKxibibgMcCht1hSJooCuIfxMEfg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><h2 id="7-分类算法"><a href="#7-分类算法" class="headerlink" title="7 分类算法"></a>7 分类算法</h2><p>GBDT的分类算法从思想上和GBDT的回归算法没有区别，但是由于样本输出不是连续的值，而是离散的类别，导致我们无法直接从输出类别去拟合类别输出的误差。</p><p>为了解决这个问题，主要有两个方法，</p><p><strong>1）一个是用指数损失函数，此时GBDT退化为Adaboost算法。</strong></p><p><strong>2）另一种方法是用类似于逻辑回归的对数似然损失函数的方法。</strong></p><p>也就是说，我们用的是类别的预测概率值和真实概率值的差来拟合损失。本文仅讨论用对数似然损失函数的GBDT分类。而对于对数似然损失函数，我们又有二元分类和多元分类的区别。</p><h3 id="7-1-二元分类算法"><a href="#7-1-二元分类算法" class="headerlink" title="7.1 二元分类算法"></a>7.1 二元分类算法</h3><p>对于二元GBDT，如果用类似于逻辑回归的对数似然损失函数，则损失函数为：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyor0u8iatLzt15YpczNnbOsoRr1sEr2RvP3jTWs8qQgAGZgrhYKhbiaEw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>其中y∈{−1,+1}。则此时的负梯度误差为</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyiaKu2ichtrUfyDRkFbwibz1WyxNxLK62ePp2OMyKcGd3eupg2jGptoJzg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>对于生成的决策树，我们各个叶子节点的最佳残差拟合值为</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyzmvLpfZt9ACruqtJct6Mdic2x1ibt92yducrmTWtCO5qg8XvDDmBIsLg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>由于上式比较难优化，我们一般使用近似值代替</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyd3gAujuSrODXLfhr0ODJ2QJ7r1AG9KY4FpMvsP8JHLw06qS4Xx3sUA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>除了负梯度计算和叶子节点的最佳残差拟合的线性搜索，二元GBDT分类和GBDT回归算法过程相同。</p><h3 id="7-2-多元分类算法"><a href="#7-2-多元分类算法" class="headerlink" title="7.2 多元分类算法"></a>7.2 <strong>多元分类算法</strong></h3><p>多元GBDT要比二元GBDT复杂一些，对应的是多元逻辑回归和二元逻辑回归的复杂度差别。假设类别数为K，则此时我们的对数似然损失函数为：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lynUXdO0WoeZx3kmacQGpC0vj9ny3ageHT4BcLG4sxJ3PeUwZY2EaTvA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>其中如果样本输出类别为k，则yk=1。第k类的概率pk(x)的表达式为：</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyfGo24kcicXMRRpfZrwUdy5MCEmttkCkL18kBibEryicNmlGiba4wgjBn8g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>集合上两式，我们可以计算出第t轮的第i个样本对应类别l的负梯度误差为</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyjDA8kSib3lX4UPdal2YQNADJibOQdec9gyRod0oXd01h37WWet50QfXA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>对于生成的决策树，我们各个叶子节点的最佳残差拟合值为</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lytoTyickEpRJluwyooIWm65M2vbM8yVf2LRwMibMUacYzx3N9EHRN3UtA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>由于上式比较难优化，我们一般使用近似值代替</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyyw8DyXqxF36pAWYHEh7AdB0BHzy8OJvBCBaygzicdUUeclNrLheGN3w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>除了负梯度计算和叶子节点的最佳残差拟合的线性搜索，多元GBDT分类和二元GBDT分类以及GBDT回归算法过程相同。</p><h2 id="8-正则化"><a href="#8-正则化" class="headerlink" title="8 正则化"></a>8 <strong>正则化</strong></h2><p>和Adaboost一样，我们也需要对GBDT进行正则化，防止过拟合。</p><p>GBDT的正则化主要有三种方式。</p><p><strong>第一种是和Adaboost类似的正则化项</strong>，即<strong>步长(learning rate)</strong>。定义为ν,对于前面的弱学习器的迭代</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyDzGSAZPzHsznm49bIdewQ5CibDjbjUK37E0BzhIe7Szcr0lRTx8Oib3A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>如果我们加上了正则化项，则有</p><p><img alt="img" data-src="https://mmbiz.qpic.cn/mmbiz_png/KdayOo3PqHCMaFT1BjrnWicmQzJOrs8lyhicpZnfvsEAUeINAqfLibtT0qNzVxy6LpDmbh6oBibmWOJhQgKNSXGK0g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" class="lazyload"></p><p>ν的取值范围为0&lt;ν≤1。对于同样的训练集学习效果，较小的ν意味着我们需要更多的弱学习器的迭代次数。通常我们用步长和迭代最大次数一起来决定算法的拟合效果。</p><p><strong>第二种正则化的方式是通过子采样比例（subsample）。</strong>取值为(0,1]。注意这里的子采样和随机森林不一样，随机森林使用的是放回抽样，而这里是不放回抽样。如果取值为1，则全部样本都使用，等于没有使用子采样。如果取值小于1，则只有一部分样本会去做GBDT的决策树拟合。选择小于1的比例可以减少方差，即防止过拟合，但是会增加样本拟合的偏差，因此取值不能太低。推荐在[0.5, 0.8]之间。<strong>使用了子采样的GBDT有时也称作随机梯度提升树(Stochastic Gradient Boosting Tree, SGBT)</strong>。由于使用了子采样，程序可以通过采样分发到不同的任务去做boosting的迭代过程，最后形成新树，从而减少弱学习器难以并行学习的弱点。 </p><p><strong>第三种是对于弱学习器即CART回归树进行正则化剪枝。</strong>在决策树原理篇里我们已经讲过，这里就不重复了</p><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9 总结"></a>9 总结</h2><p>GDBT本身并不复杂，不过要吃透的话需要对集成学习的原理，决策树原理和各种损失函树有一定的了解。由于GBDT的卓越性能，只要是研究机器学习都应该掌握这个算法，包括背后的原理和应用调参方法。目前GBDT的算法比较好的库是xgboost。当然scikit-learn也可以。</p><p><strong>优点</strong></p><p><strong>1)</strong> 可以灵活处理各种类型的数据，包括连续值和离散值。</p><p><strong>2)</strong> 在相对少的调参时间情况下，预测的准备率也可以比较高。这个是相对SVM来说的。</p><p><strong>3）</strong>使用一些健壮的损失函数，对异常值的鲁棒性非常强。比如 Huber损失函数和Quantile损失函数。</p><p><strong>缺点</strong></p><p><strong>1)</strong> 由于弱学习器之间存在依赖关系，难以并行训练数据。不过可以通过自采样的SGBT来达到部分并行。</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> GBDT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GBDT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列之决策树算法（09）：ID3、C4.5、CART、随机森林、bagging、boosting、Adaboost、GBDT、xgboost算法总结</title>
      <link href="/2019/12/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95%EF%BC%8809%EF%BC%89%EF%BC%9AID3%E3%80%81C4.5%E3%80%81CART%E3%80%81%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E3%80%81bagging%E3%80%81boosting%E3%80%81Adaboost%E3%80%81GBDT%E3%80%81xgboost%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95%EF%BC%8809%EF%BC%89%EF%BC%9AID3%E3%80%81C4.5%E3%80%81CART%E3%80%81%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E3%80%81bagging%E3%80%81boosting%E3%80%81Adaboost%E3%80%81GBDT%E3%80%81xgboost%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>最近心血来潮，整理了一下和树有关的方法和模型，请多担待！</p><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a><strong>决策树</strong></h2><p>首先，决策树是一个有监督的分类模型，其本质是选择一个能带来最大信息增益的特征值进行树的分割，直到到达结束条件或者叶子结点纯度到达一定阈值。下图是决策树的一个简单例子</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-a0af608723c15fc3d2ce3fc650cee4d4_hd.jpg" class="lazyload"></p><p>按照分割指标和分割方法，决策树的经典模型可以分为ID3、C4.5以及CART</p><h3 id="ID3：以信息增益为准则来选择最优划分属性"><a href="#ID3：以信息增益为准则来选择最优划分属性" class="headerlink" title="ID3：以信息增益为准则来选择最优划分属性"></a><strong>ID3：以信息增益为准则来选择最优划分属性</strong></h3><p>信息增益的计算要基于信息熵（度量样本集合纯度的指标）</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-e0ce667594401d2f8daf3ee6a7da9151_hd.jpg" class="lazyload">信息熵越小，数据集X的纯度越大</p><p>因此，假设于数据集D上建立决策树，数据有K个类别：</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-f6d10699fdbe216617836c7e8732ba58_hd.jpg" class="lazyload"></p><p>公式（1）中：</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-181bbc695d6de40eff56d86518d84f29_hd.jpg" class="lazyload">表示第k类样本的数据占数据集D样本总数的比例</p><p>公式（2）表示的是以特征A作为分割的属性，得到的信息熵：</p><p>Di表示的是以属性A为划分，分成n个分支，第i个分支的节点集合</p><p>因此，该公式求的是以属性A为划分，n个分支的信息熵总和</p><p>公式（3）为分割后与分割前的信息熵的差值，也就是信息增益，越大越好</p><p>但是这种分割算法存在一定的<strong>缺陷</strong>：</p><p>假设每个记录有一个属性“ID”，若按照ID来进行分割的话，由于ID是唯一的，因此在这一个属性上，能够取得的特征值等于样本的数目，也就是说ID的特征值很多。那么无论以哪个ID为划分，叶子结点的值只会有一个，纯度很大，得到的信息增益会很大，但这样划分出来的决策树是没意义的。由此可见，<strong>ID3决策树偏向于取值较多的属性进行分割，存在一定的偏好。</strong>为减小这一影响，有学者提出C4.5的分类算法。</p><h3 id="C4-5：基于信息增益率准则选择最优分割属性"><a href="#C4-5：基于信息增益率准则选择最优分割属性" class="headerlink" title="C4.5：基于信息增益率准则选择最优分割属性"></a><strong>C4.5：基于信息增益率准则选择最优分割属性</strong></h3><p>信息增益比率通过引入一个被称作分裂信息(Split information)的项来惩罚取值较多的属性。</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-c35719627c479737cb680c3f4d8cdf6d_hd.jpg" class="lazyload"></p><p>上式，分子计算与ID3一样，分母是由属性A的特征值个数决定的，个数越多，IV值越大，信息增益率越小，这样就可以避免模型偏好特征值多的属性，但是聪明的人一看就会发现，如果简单的按照这个规则来分割，模型又会偏向特征数少的特征。因此C4.5决策树先从候选划分属性中找出<strong>信息增益高于平均水平</strong>的属性，在从中选择<strong>增益率最高</strong>的。</p><p>对于连续值属性来说，可取值数目不再有限，因此可以采用离散化技术（如二分法）进行处理。将属性值从小到大排序，然后选择中间值作为分割点，数值比它小的点被划分到左子树，数值不小于它的点被分到又子树，计算分割的信息增益率，选择信息增益率最大的属性值进行分割。</p><h3 id="CART：以基尼系数为准则选择最优划分属性"><a href="#CART：以基尼系数为准则选择最优划分属性" class="headerlink" title="CART：以基尼系数为准则选择最优划分属性"></a><strong>CART：以基尼系数为准则选择最优划分属性</strong></h3><p>CART是一棵二叉树，采用二元切分法，每次把数据切成两份，分别进入左子树、右子树。而且每个非叶子节点都有两个孩子，所以CART的叶子节点比非叶子多1。相比ID3和C4.5，CART应用要多一些，既可以用于分类也可以用于回归。CART分类时，使用基尼指数（Gini）来选择最好的数据分割的特征，gini描述的是纯度，与信息熵的含义相似。CART中每一次迭代都会降低GINI系数。</p><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-79214da261d75829046953ab9cb8b03a_hd.jpg" class="lazyload">Di表示以A是属性值划分成n个分支里的数目</p><p>Gini(D)反映了数据集D的纯度，值越小，纯度越高。我们在候选集合中选择使得划分后基尼指数最小的属性作为最优化分属性。</p><h3 id="分类树和回归树"><a href="#分类树和回归树" class="headerlink" title="分类树和回归树"></a><strong>分类树和回归树</strong></h3><p>提到决策树算法，很多想到的就是上面提到的ID3、C4.5、CART分类决策树。其实决策树分为分类树和回归树，前者用于分类，如晴天/阴天/雨天、用户性别、邮件是否是垃圾邮件，后者用于预测实数值，如明天的温度、用户的年龄等。</p><p>作为对比，先说分类树，我们知道ID3、C4.5分类树在每次分枝时，是穷举每一个特征属性的每一个阈值，找到使得按照feature&lt;=阈值，和feature&gt;阈值分成的两个分枝的熵最大的feature和阈值。按照该标准分枝得到两个新节点，用同样方法继续分枝直到所有人都被分入性别唯一的叶子节点，或达到预设的终止条件，若最终叶子节点中的性别不唯一，则以多数人的性别作为该叶子节点的性别。</p><p>回归树总体流程也是类似，不过在每个节点（不一定是叶子节点）都会得一个预测值，以年龄为例，该预测值等于属于这个节点的所有人年龄的平均值。分枝时穷举每一个feature的每个阈值找最好的分割点，但衡量最好的标准不再是最大熵，而是最小化均方差–即（每个人的年龄-预测年龄）^2 的总和 / N，或者说是每个人的预测误差平方和 除以 N。这很好理解，被预测出错的人数越多，错的越离谱，均方差就越大，通过最小化均方差能够找到最靠谱的分枝依据。分枝直到每个叶子节点上人的年龄都唯一（这太难了）或者达到预设的终止条件（如叶子个数上限），若最终叶子节点上人的年龄不唯一，则以该节点上所有人的平均年龄做为该叶子节点的预测年龄。</p><h2 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a><strong>随机森林</strong></h2><p>在讲随机森林之前，我们需要补充一点<strong>组合分类器</strong>的概念，将多个分类器的结果进行多票表决或者是取平均值，以此作为最终的结果。</p><p>1、构建组合分类器的好处：</p><p>（1）、提升模型精度：整合各个模型的分类结果，得到更合理的决策边界，减少整体错误，实现更好的分类效果；</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-8fc5ff86df06a3c4d3f7d4b055642224_hd.jpg" class="lazyload"></p><p>（2）、处理过大或过小的数据集：数据集较大时，可以将数据集划分成多个子集，对子集构建分类器；数据集较小时，可通过多种抽样方式（bootstrap）从原始数据集抽样产生多组不同的数据集，构建分类器。</p><p>（3）、若决策边界过于复杂，则线性模型不能很好地描述真实情况。因此先对于特定区域的数据集，训练多个线性分类器，再将它们集成。</p><p><img alt="img" data-src="https://pic4.zhimg.com/80/v2-fdd9a957b915ec7711c68af1b365b30f_hd.jpg" class="lazyload"></p><p>（4）、比较适合处理多源异构数据（存储方式不同（关系型、非关系型），类别不同（时序型、离散型、连续型、网络结构数据））</p><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-2743e0131bdb39de81f01649bc0f3b4e_hd.jpg" class="lazyload"></p><p>随机森林是一个典型的多个决策树的组合分类器。主要包括两个方面：数据的随机性选取，以及待选特征的随机选取。</p><p>（1）、数据的随机选取：<br>第一，从原始的数据集中采取有放回的抽样（bootstrap），构造子数据集，子数据集的数据量是和原始数据集相同的。不同子数据集的元素可以重复，同一个子数据集中的元素也可以重复。<br>第二，利用子数据集来构建子决策树，将这个数据放到每个子决策树中，每个子决策树输出一个结果。最后，如果有了新的数据需要通过随机森林得到分类结果，就可以通过对子决策树的判断结果的投票，得到随机森林的输出结果了。如下图，假设随机森林中有3棵子决策树，2棵子树的分类结果是A类，1棵子树的分类结果是B类，那么随机森林的分类结果就是A类。</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-a1c3ce43528dbc274be8952c06d2b9b4_hd.jpg" class="lazyload"></p><p>（2）、待选特征的随机选取：<br>与数据集的随机选取类似，随机森林中的子树的每一个分裂过程并未用到所有的待选特征，而是从所有的待选特征中随机选取一定的特征，之后再在随机选取的特征中选取最优的特征。这样能够使得随机森林中的决策树都能够彼此不同，提升系统的多样性，从而提升分类性能。</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-569009cc3ccd3e9922b77c1e4cbf4ca0_hd.jpg" class="lazyload">组合树示例图</p><h2 id="GBDT和xgboost"><a href="#GBDT和xgboost" class="headerlink" title="GBDT和xgboost"></a><strong>GBDT和xgboost</strong></h2><h3 id="bagging和boosting"><a href="#bagging和boosting" class="headerlink" title="bagging和boosting"></a><strong>bagging和boosting</strong></h3><p>Bagging的思想比较简单，即每一次从原始数据中根据<strong>均匀概率分布有放回的抽取和原始数据大小相同的样本集合</strong>，样本点可能出现重复，然后对每一次产生的训练集构造一个分类器，再对分类器进行组合。</p><p>boosting的每一次抽样的<strong>样本分布都是不一样的</strong>。每一次迭代，都根据上一次迭代的结果，<strong>增加被错误分类的样本的权重</strong>，使得模型能在之后的迭代中更加注意到难以分类的样本，这是一个<strong>不断学习的过程，也是一个不断提升</strong>的过程，这也就是boosting思想的本质所在。迭代之后，将每次迭代的基分类器进行集成。那么如何进行样本权重的调整和分类器的集成是我们需要考虑的关键问题。</p><p><img alt="img" data-src="https://pic4.zhimg.com/80/v2-aca3644ddd56abe1e47c0f45601587c3_hd.jpg" class="lazyload">boosting算法结构图</p><p>拿著名的<strong>Adaboost算法</strong>举例：</p><p><img alt="img" data-src="https://pic4.zhimg.com/80/v2-42d79b3f2d50c86679f7c9bbc088d5f7_hd.jpg" class="lazyload">我们有一个数据集，样本大小为N，每一个样本对应一个原始标签起初，我们初始化样本的权重为1/N</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-3f8463843d3f88642a288666ecb94ff1_hd.jpg" class="lazyload">em计算的是当前数据下，模型的分类误差率，模型的系数值是基于分类误差率的</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-8d2590f60815d6389572d4f09ed9a658_hd.jpg" class="lazyload">根据模型的分类结果，更新原始数据中数据的分布，增加被错分的数据被抽中的概率，以便下一次迭代的时候能被模型重新训练</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-7000a239700933215671f4f66066ddd4_hd.jpg" class="lazyload">最终的分类器是各个基分类器的组合</p><h3 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h3><p>GBDT是以决策树（CART）为基学习器的GB算法，是<strong>迭代树</strong>，而不是分类树。Boost是”提升”的意思，一般Boosting算法都是一个迭代的过程，每一次新的训练都是为了改进上一次的结果。有了前面Adaboost的铺垫，大家应该能很容易理解大体思想。</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-4713a5b63da71ef5afba3fcd3a65299d_hd.jpg" class="lazyload"></p><p>GBDT的核心就在于：<strong>每一棵树学的是之前所有树结论和的残差</strong>，这个残差就是一个加预测值后能得真实值的累加量。比如A的真实年龄是18岁，但第一棵树的预测年龄是12岁，差了6岁，即残差为6岁。那么在第二棵树里我们把A的年龄设为6岁去学习，如果第二棵树真的能把A分到6岁的叶子节点，那累加两棵树的结论就是A的真实年龄；如果第二棵树的结论是5岁，则A仍然存在1岁的残差，第三棵树里A的年龄就变成1岁，继续学习。</p><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-a384924b89b1bdd581cef7d75b56e226_hd.jpg" class="lazyload"></p><h3 id="xgboost"><a href="#xgboost" class="headerlink" title="xgboost"></a><strong>xgboost</strong></h3><p>Xgboost相比于GBDT来说，更加有效应用了<strong>数值优化，最重要是对损失函数</strong>（预测值和真实值的误差）<strong>变得更复杂</strong>。目标函数依然是所有树的预测值相加等于预测值。</p><p>损失函数如下，引入了一阶导数，二阶导数。：</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-1c0706e463f78b6036b3923048ac9149_hd.jpg" class="lazyload">好的模型需要具备两个基本要素：一是要有好的精度（即好的拟合程度），二是模型要尽可能的简单（复杂的模型容易出现过拟合，并且更加不稳定）因此，我们构建的目标函数右边第一项是模型的误差项，第二项是正则化项（也就是模型复杂度的惩罚项）</p><p>常用的误差项有平方误差和逻辑斯蒂误差，常见的惩罚项有l1，l2正则，l1正则是将模型各个元素进行求和，l2正则是对元素求平方。</p><p><img alt="img" data-src="https://pic4.zhimg.com/80/v2-a9b82954ae62e9e6da256c69ba22d38b_hd.jpg" class="lazyload">每一次迭代，都在现有树的基础上，增加一棵树去拟合前面树的预测结果与真实值之间的残差</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-f0cd240fcc70e7615dae7c2a29856bfc_hd.jpg" class="lazyload">目标函数如上图，最后一行画圈部分实际上就是预测值和真实值之间的残差</p><p>先对训练误差进行展开：</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-9f9f93d4a9d618d14201836d8f45a918_hd.jpg" class="lazyload">xgboost则对代价函数进行了二阶泰勒展开，同时用到了残差平方和的一阶和二阶导数</p><p>再研究目标函数中的正则项：</p><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-142ca609c9ff3dc2df877a00c30756ca_hd.jpg" class="lazyload"></p><p>树的复杂度可以用树的分支数目来衡量，树的分支我们可以用叶子结点的数量来表示</p><p>那么树的复杂度式子：右边第一项是叶子结点的数量T，第二项是树的叶子结点权重w的l2正则化，正则化是为了防止叶子结点过多</p><p>此时，每一次迭代，相当于在原有模型中增加一棵树，目标函数中，我们用wq（x）表示一棵树，包括了树的结构以及叶子结点的权重，w表示权重（反映预测的概率），q表示样本所在的索引号（反映树的结构）</p><p>将最终得到的目标函数对参数w求导，带回目标函数，可知目标函数值由红色方框部分决定：</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-c7ab2fcfd3196dbc0bce05d17b11d220_hd.jpg" class="lazyload"></p><p>因此，xgboost的迭代是以下图中gain式子定义的指标选择最优分割点的：</p><p><img alt="img" data-src="https://pic4.zhimg.com/80/v2-d0cf0063c23679e711146f861d36fc17_hd.jpg" class="lazyload"></p><p>那么如何得到优秀的组合树呢？</p><p>一种办法是贪心算法，遍历一个节点内的所有特征，按照公式计算出按照每一个特征分割的信息增益，找到信息增益最大的点进行树的分割。增加的新叶子惩罚项对应了树的剪枝，当gain小于某个阈值的时候，我们可以剪掉这个分割。但是这种办法不适用于数据量大的时候，因此，我们需要运用近似算法。</p><p>另一种方法：XGBoost在寻找splitpoint的时候，不会枚举所有的特征值，而会对特征值进行聚合统计，按照<strong>特征值的密度分布</strong>，构造直方图计算特征值分布的面积，然后划分分布形成若干个bucket(桶)，每个bucket的面积相同，将<strong>bucket边界上的特征值</strong>作为split<br>point的候选，<strong>遍历所有的候选分裂点</strong>来找到最佳分裂点。</p><p>上图近似算法公式的解释：将特征k的特征值进行排序，计算特征值分布，rk（z）表示的是对于特征k而言，其特征值小于z的权重之和占总权重的比例，代表了这些特征值的重要程度，我们按照这个比例计算公式，将特征值分成若干个bucket，每个bucket的比例相同，选取这几类特征值的边界作为划分候选点，构成候选集；选择候选集的条件是要使得相邻的两个候选分裂节点差值小于某个阈值。</p><p>综合以上的解说，我们可以得到xgboost相比于GBDT的创新之处：</p><p>传统GBDT以CART作为基分类器，xgboost还支持线性分类器，这个时候xgboost相当于带L1和L2正则化项的逻辑斯蒂回归（分类问题）或者线性回归（回归问题）。</p><ul><li>传统GBDT在优化时只用到一阶导数信息，xgboost则对代价函数进行了<strong>二阶泰勒展开，同时用到了一阶和二阶导数</strong>。顺便提一下，xgboost工具支持自定义代价函数，只要函数可一阶和二阶求导。</li><li>xgboost在<strong>代价函数里加入了正则项，用于控制模型的复杂度</strong>。正则项里包含了树的叶子节点个数、每个叶子节点上输出的score的L2模的平方和。从Bias-variance tradeoff角度来讲，正则项降低了模型的variance，使学习出来的模型更加简单，防止过拟合，这也是xgboost优于传统GBDT的一个特性。</li><li><strong>Shrinkage（缩减），相当于学习速率（xgboost中的eta）</strong>。每次迭代，增加新的模型，在前面成上一个小于1的系数，降低优化的速度，每次走一小步逐步逼近最优模型比每次走一大步逼近更加容易避免过拟合现象；</li><li>列抽样（column subsampling）。xgboost借鉴了随机森林的做法，支持列抽样（即每次的输入特征不是全部特征），不仅能降低过拟合，还能减少计算，这也是xgboost异于传统gbdt的一个特性。</li><li>忽略缺失值：在寻找splitpoint的时候，不会对该特征为missing的样本进行遍历统计，只对该列特征值为non-missing的样本上对应的特征值进行遍历，通过这个工程技巧来减少了为稀疏离散特征寻找splitpoint的时间开销</li><li>指定缺失值的分隔方向：可以为缺失值或者指定的值指定分支的默认方向，为了保证完备性，会分别处理将missing该特征值的样本分配到左叶子结点和右叶子结点的两种情形，分到那个子节点带来的增益大，默认的方向就是哪个子节点，这能大大提升算法的效率。</li><li>并行化处理：在训练之前，预先对每个特征内部进行了排序找出候选切割点，然后保存为block结构，后面的迭代中重复地使用这个结构，大大减小计算量。在进行节点的分裂时，需要计算每个特征的增益，最终选增益最大的那个特征去做分裂，那么各个特征的增益计算就可以开多线程进行，即在不同的特征属性上采用多线程并行方式寻找最佳分割点。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> GBDT </category>
          
          <category> XGBoost </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GBDT </tag>
            
            <tag> XGBoost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LightGBM算法基础系列之基础理论篇（1）</title>
      <link href="/2019/12/19/LightGBM%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E7%AF%87%EF%BC%881%EF%BC%89/"/>
      <url>/2019/12/19/LightGBM%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E7%AF%87%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这是lightgbm算法基础系列的第一篇，讲述lightgbm基础理论。</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> LightGBM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LightGBM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据存储之MySQL系列（01）：MySQL体系结构</title>
      <link href="/2019/12/19/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8BMySQL%E7%B3%BB%E5%88%97%EF%BC%8801%EF%BC%89%EF%BC%9AMySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2019/12/19/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8BMySQL%E7%B3%BB%E5%88%97%EF%BC%8801%EF%BC%89%EF%BC%9AMySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xgboost算法模型输出的解释</title>
      <link href="/2019/12/19/xgboost%E7%AE%97%E6%A8%A1%E5%9E%8B%E8%BE%93%E5%87%BA%E7%9A%84%E8%A7%A3%E9%87%8A/"/>
      <url>/2019/12/19/xgboost%E7%AE%97%E6%A8%A1%E5%9E%8B%E8%BE%93%E5%87%BA%E7%9A%84%E8%A7%A3%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h2><p> 近来, 在python环境下使用xgboost算法作若干的机器学习任务, 在这个过程中也使用了其内置的函数来可视化树的结果, 但对leaf value的值一知半解; 同时, 也遇到过使用xgboost 内置的predict 对测试集进行打分预测, 发现若干样本集的输出分值是一样的. 这个问题该怎么解释呢? 通过翻阅Stack Overflow 上的相关问题, 以及搜索到的github上的issue回答, 应该算初步对这个问题有了一定的理解。</p><h2 id="2-数据集"><a href="#2-数据集" class="headerlink" title="2. 数据集"></a>2. 数据集</h2><p> 在这里, 使用经典的鸢尾花的数据来说明. 使用二分类的问题来说明, 故在这里只取前100行的数据.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"> </span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">data = iris.data[:<span class="number">100</span>]</span><br><span class="line"><span class="keyword">print</span> data.shape</span><br><span class="line"><span class="comment">#(100L, 4L)</span></span><br><span class="line"><span class="comment">#一共有100个样本数据, 维度为4维</span></span><br><span class="line"> </span><br><span class="line">label = iris.target[:<span class="number">100</span>]</span><br><span class="line"><span class="keyword">print</span> label</span><br><span class="line"><span class="comment">#正好选取label为0和1的数据</span></span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="3-训练集与测试集"><a href="#3-训练集与测试集" class="headerlink" title="3. 训练集与测试集"></a>3. 训练集与测试集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split</span><br><span class="line"> </span><br><span class="line">train_x, test_x, train_y, test_y = train_test_split(data, label, random_state=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="4-Xgboost建模"><a href="#4-Xgboost建模" class="headerlink" title="4. Xgboost建模"></a>4. Xgboost建模</h2><h3 id="4-1-模型初始化设置"><a href="#4-1-模型初始化设置" class="headerlink" title="4.1 模型初始化设置"></a>4.1 模型初始化设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line">dtrain=xgb.DMatrix(train_x,label=train_y)</span><br><span class="line">dtest=xgb.DMatrix(test_x)</span><br><span class="line"> </span><br><span class="line">params=&#123;<span class="string">'booster'</span>:<span class="string">'gbtree'</span>,</span><br><span class="line">    <span class="string">'objective'</span>: <span class="string">'binary:logistic'</span>,</span><br><span class="line">    <span class="string">'eval_metric'</span>: <span class="string">'auc'</span>,</span><br><span class="line">    <span class="string">'max_depth'</span>:<span class="number">4</span>,</span><br><span class="line">    <span class="string">'lambda'</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="string">'subsample'</span>:<span class="number">0.75</span>,</span><br><span class="line">    <span class="string">'colsample_bytree'</span>:<span class="number">0.75</span>,</span><br><span class="line">    <span class="string">'min_child_weight'</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="string">'eta'</span>: <span class="number">0.025</span>,</span><br><span class="line">    <span class="string">'seed'</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">'nthread'</span>:<span class="number">8</span>,</span><br><span class="line">     <span class="string">'silent'</span>:<span class="number">1</span>&#125;</span><br><span class="line"> </span><br><span class="line">watchlist = [(dtrain,<span class="string">'train'</span>)]</span><br></pre></td></tr></table></figure><h3 id="4-2-建模与预测"><a href="#4-2-建模与预测" class="headerlink" title="4.2 建模与预测"></a>4.2 建模与预测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bst=xgb.train(params,dtrain,num_boost_round=<span class="number">100</span>,evals=watchlist)</span><br><span class="line"> </span><br><span class="line">ypred=bst.predict(dtest)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置阈值, 输出一些评价指标</span></span><br><span class="line">y_pred = (ypred &gt;= <span class="number">0.5</span>)*<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">print</span> <span class="string">'AUC: %.4f'</span> % metrics.roc_auc_score(test_y,ypred)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'ACC: %.4f'</span> % metrics.accuracy_score(test_y,y_pred)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Recall: %.4f'</span> % metrics.recall_score(test_y,y_pred)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'F1-score: %.4f'</span> %metrics.f1_score(test_y,y_pred)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Precesion: %.4f'</span> %metrics.precision_score(test_y,y_pred)</span><br><span class="line">metrics.confusion_matrix(test_y,y_pred)</span><br></pre></td></tr></table></figure><p>Out[23]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AUC: <span class="number">1.0000</span></span><br><span class="line">ACC: <span class="number">1.0000</span></span><br><span class="line">Recall: <span class="number">1.0000</span></span><br><span class="line">F1-score: <span class="number">1.0000</span></span><br><span class="line">Precesion: <span class="number">1.0000</span></span><br><span class="line">array([[<span class="number">13</span>,  <span class="number">0</span>],</span><br><span class="line">       [ <span class="number">0</span>, <span class="number">12</span>]], dtype=int64)</span><br></pre></td></tr></table></figure><p>Yeah, 完美的模型, 完美的预测!</p><h3 id="4-3-可视化输出"><a href="#4-3-可视化输出" class="headerlink" title="4.3 可视化输出"></a>4.3 可视化输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对于预测的输出有三种方式</span></span><br><span class="line">?bst.predict</span><br><span class="line">Signature: bst.predict(data, output_margin=<span class="literal">False</span>, ntree_limit=<span class="number">0</span>, pred_leaf=<span class="literal">False</span>, pred_contribs=<span class="literal">False</span>, approx_contribs=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">pred_leaf : bool</span><br><span class="line">    When this option <span class="keyword">is</span> on, the output will be a matrix of (nsample, ntrees)</span><br><span class="line">    <span class="keyword">with</span> each record indicating the predicted leaf index of each sample <span class="keyword">in</span> each tree.</span><br><span class="line">    Note that the leaf index of a tree <span class="keyword">is</span> unique per tree, so you may find leaf <span class="number">1</span></span><br><span class="line">    <span class="keyword">in</span> both tree <span class="number">1</span> <span class="keyword">and</span> tree <span class="number">0.</span></span><br><span class="line"> </span><br><span class="line">pred_contribs : bool</span><br><span class="line">    When this option <span class="keyword">is</span> on, the output will be a matrix of (nsample, nfeats+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">with</span> each record indicating the feature contributions (SHAP values) <span class="keyword">for</span> that</span><br><span class="line">    prediction. The sum of all feature contributions <span class="keyword">is</span> equal to the prediction.</span><br><span class="line">    Note that the bias <span class="keyword">is</span> added <span class="keyword">as</span> the final column, on top of the regular features.</span><br></pre></td></tr></table></figure><h4 id="4-3-1-得分"><a href="#4-3-1-得分" class="headerlink" title="4.3.1 得分"></a>4.3.1 得分</h4><p>默认的输出就是得分, 这没什么好说的, 直接上code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ypred = bst.predict(dtest)</span><br><span class="line">ypred</span><br></pre></td></tr></table></figure><p>Out[32]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([ <span class="number">0.20081411</span>,  <span class="number">0.80391562</span>,  <span class="number">0.20081411</span>,  <span class="number">0.80391562</span>,  <span class="number">0.80391562</span>,</span><br><span class="line">        <span class="number">0.80391562</span>,  <span class="number">0.20081411</span>,  <span class="number">0.80391562</span>,  <span class="number">0.80391562</span>,  <span class="number">0.80391562</span>,</span><br><span class="line">        <span class="number">0.80391562</span>,  <span class="number">0.80391562</span>,  <span class="number">0.80391562</span>,  <span class="number">0.20081411</span>,  <span class="number">0.20081411</span>,</span><br><span class="line">        <span class="number">0.20081411</span>,  <span class="number">0.20081411</span>,  <span class="number">0.20081411</span>,  <span class="number">0.20081411</span>,  <span class="number">0.20081411</span>,</span><br><span class="line">        <span class="number">0.20081411</span>,  <span class="number">0.80391562</span>,  <span class="number">0.20081411</span>,  <span class="number">0.80391562</span>,  <span class="number">0.20081411</span>], dtype=float32)</span><br></pre></td></tr></table></figure><p>在这里, 就可以观察到文章最开始遇到的问题: 为什么得分几乎都是一样的值? 先不急, 看看另外两种输出.</p><h4 id="4-3-2-所属的叶子节点"><a href="#4-3-2-所属的叶子节点" class="headerlink" title="4.3.2 所属的叶子节点"></a>4.3.2 所属的叶子节点</h4><p>当设置<code>pred_leaf=True</code>的时候, 这时就会输出每个样本在所有树中的叶子节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ypred_leaf = bst.predict(dtest, pred_leaf=<span class="literal">True</span>)</span><br><span class="line">ypred_leaf</span><br></pre></td></tr></table></figure><p>Out[33]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, ..., <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, ..., <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, ..., <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       ..., </span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, ..., <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, ..., <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, ..., <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><p>输出的维度为[样本数, 树的数量], 树的数量默认是100, 所以<code>ypred_leaf</code>的维度为<code>[100*100]</code>.</p><p>对于第一行数据的解释就是, 在xgboost所有的100棵树里, 预测的叶子节点都是1(相对于每颗树).</p><p>那怎么看每颗树以及相应的叶子节点的分值呢?这里有两种方法, 可视化树或者直接输出模型.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xgb.to_graphviz(bst, num_trees=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#可视化第一棵树的生成情况</span></span><br></pre></td></tr></table></figure><p><img alt="img" data-src="https://images2017.cnblogs.com/blog/957413/201710/957413-20171017204407818-1932629185.png" class="lazyload"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接输出模型的迭代工程</span></span><br><span class="line">bst.dump_model(<span class="string">"model.txt"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">booster[<span class="number">0</span>]:</span><br><span class="line"><span class="number">0</span>:[f3&lt;<span class="number">0.75</span>] yes=<span class="number">1</span>,no=<span class="number">2</span>,missing=<span class="number">1</span></span><br><span class="line">    <span class="number">1</span>:leaf=<span class="number">-0.019697</span></span><br><span class="line">    <span class="number">2</span>:leaf=<span class="number">0.0214286</span></span><br><span class="line">booster[<span class="number">1</span>]:</span><br><span class="line"><span class="number">0</span>:[f2&lt;<span class="number">2.35</span>] yes=<span class="number">1</span>,no=<span class="number">2</span>,missing=<span class="number">1</span></span><br><span class="line">    <span class="number">1</span>:leaf=<span class="number">-0.0212184</span></span><br><span class="line">    <span class="number">2</span>:leaf=<span class="number">0.0212</span></span><br><span class="line">booster[<span class="number">2</span>]:</span><br><span class="line"><span class="number">0</span>:[f2&lt;<span class="number">2.35</span>] yes=<span class="number">1</span>,no=<span class="number">2</span>,missing=<span class="number">1</span></span><br><span class="line">    <span class="number">1</span>:leaf=<span class="number">-0.0197404</span></span><br><span class="line">    <span class="number">2</span>:leaf=<span class="number">0.0197235</span></span><br><span class="line">booster[<span class="number">3</span>]: ……</span><br></pre></td></tr></table></figure><p>通过上述命令就可以输出模型的迭代过程, 可以看到每颗树都有两个叶子节点(树比较简单). 然后我们对每颗树中的叶子节点1的value进行累加求和, 同时进行相应的函数转换, 就是第一个样本的预测值.</p><p>在这里, 以第一个样本为例, 可以看到, 该样本在所有树中都属于第一个叶子, 所以累加值, 得到以下值.</p><p>同样, 以第二个样本为例, 可以看到, 该样本在所有树中都属于第二个叶子, 所以累加值, 得到以下值.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">leaf1   <span class="number">-1.381214</span></span><br><span class="line">leaf2    <span class="number">1.410950</span></span><br></pre></td></tr></table></figure><p>在使用xgboost模型最开始, 模型初始化的时候, 我们就设置了<code>&#39;objective&#39;: &#39;binary:logistic&#39;</code>, 因此使用函数将累加的值转换为实际的打分:</p><p>f(x)=1/(1+exp(−x))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>/float(<span class="number">1</span>+np.exp(<span class="number">1.38121416</span>))</span><br><span class="line">Out[<span class="number">24</span>]: <span class="number">0.20081407112186503</span></span><br><span class="line"><span class="number">1</span>/float(<span class="number">1</span>+np.exp(<span class="number">-1.410950</span>))</span><br><span class="line">Out[<span class="number">25</span>]: <span class="number">0.8039157403338895</span></span><br></pre></td></tr></table></figure><p>这就与<code>ypred = bst.predict(dtest)</code> 的分值相对应上了.</p><h4 id="4-3-2-特征重要性"><a href="#4-3-2-特征重要性" class="headerlink" title="4.3.2 特征重要性"></a>4.3.2 特征重要性</h4><p>接着, 我们看另一种输出方式, 输出的是特征相对于得分的重要性.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ypred_contribs = bst.predict(dtest, pred_contribs=<span class="literal">True</span>)</span><br><span class="line">ypred_contribs</span><br></pre></td></tr></table></figure><p>Out[37]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">array([[ <span class="number">0.</span>        ,  <span class="number">0.</span>        , <span class="number">-1.01448286</span>, <span class="number">-0.41277751</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.96967536</span>,  <span class="number">0.39522746</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        , <span class="number">-1.01448286</span>, <span class="number">-0.41277751</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.96967536</span>,  <span class="number">0.39522746</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.96967536</span>,  <span class="number">0.39522746</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.96967536</span>,  <span class="number">0.39522746</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        , <span class="number">-1.01448286</span>, <span class="number">-0.41277751</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.96967536</span>,  <span class="number">0.39522746</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.96967536</span>,  <span class="number">0.39522746</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.96967536</span>,  <span class="number">0.39522746</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.96967536</span>,  <span class="number">0.39522746</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.96967536</span>,  <span class="number">0.39522746</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.96967536</span>,  <span class="number">0.39522746</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        , <span class="number">-1.01448286</span>, <span class="number">-0.41277751</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        , <span class="number">-1.01448286</span>, <span class="number">-0.41277751</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        , <span class="number">-1.01448286</span>, <span class="number">-0.41277751</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        , <span class="number">-1.01448286</span>, <span class="number">-0.41277751</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        , <span class="number">-1.01448286</span>, <span class="number">-0.41277751</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        , <span class="number">-1.01448286</span>, <span class="number">-0.41277751</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        , <span class="number">-1.01448286</span>, <span class="number">-0.41277751</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        , <span class="number">-1.01448286</span>, <span class="number">-0.41277751</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.96967536</span>,  <span class="number">0.39522746</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        , <span class="number">-1.01448286</span>, <span class="number">-0.41277751</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.96967536</span>,  <span class="number">0.39522746</span>,  <span class="number">0.04604663</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        , <span class="number">-1.01448286</span>, <span class="number">-0.41277751</span>,  <span class="number">0.04604663</span>]], dtype=float32)</span><br></pre></td></tr></table></figure><p>输出的<code>ypred_contribs</code>的维度为<code>[100,5]</code>, 通过阅读前面的文档注释就可以知道, 最后一列是<code>bias</code>, 前面的四列分别是每个特征对最后打分的影响因子, 可以看出, 前面两个特征是不起作用的.</p><p>通过这个输出, 怎么和最后的打分进行关联呢? 原理也是一样的, 还是以前两列为例.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">score_a = sum(ypred_contribs[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">print</span> score_a</span><br><span class="line"><span class="comment"># -1.38121373579</span></span><br><span class="line">score_b = sum(ypred_contribs[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> score_b</span><br><span class="line"><span class="comment"># 1.41094945744</span></span><br></pre></td></tr></table></figure><p>相同的分值, 相同的处理情况.</p><p>到此, 这期关于在python上关于xgboost算法的简单实现, 以及在实现的过程中: 得分的输出、样本对应到树的节点、每个样本中单独特征对得分的影响, 以及上述三者之间的联系, 均已介绍完毕。</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> XGBboost </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XGBboost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列之决策树算法（02）：决策树的剪枝</title>
      <link href="/2019/12/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95%EF%BC%8803%EF%BC%89%EF%BC%9A%E5%86%B3%E7%AD%96%E6%A0%91%E7%9A%84%E5%89%AA%E6%9E%9D/"/>
      <url>/2019/12/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95%EF%BC%8803%EF%BC%89%EF%BC%9A%E5%86%B3%E7%AD%96%E6%A0%91%E7%9A%84%E5%89%AA%E6%9E%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>上一篇文章介绍了决策树的生成详细过程，由于决策树生成算法过多地考虑如何提高对训练数据的正确分类，从而构建过于复杂的决策树，这样产生的决策树往往对训练数据的分类很准确，却对未知的测试数据的分类没有那么准确，即出现<strong>过拟合现象</strong>。我们需要对已生成的决策树进行简化，这个简化的过程我们称之为<strong>剪枝(pruning)。</strong></p><p>具体就是剪掉一些不重要的子树或叶结点，并将其根结点或父结点作为新的叶结点，从而简化分类树模型，得到最优的决策树模型。保证模型对预测数据的泛化能力。</p><blockquote><p>决策树的剪枝往往通过<strong>极小化</strong>决策树整体的<strong>损失函数(loss funtion)</strong>或<strong>代价函数(cost funtion)</strong>来实现。</p></blockquote><h1 id="2-剪枝算法"><a href="#2-剪枝算法" class="headerlink" title="2.剪枝算法"></a>2.剪枝算法</h1><h2 id="2-1-为什么要剪枝"><a href="#2-1-为什么要剪枝" class="headerlink" title="2.1 为什么要剪枝"></a>2.1 为什么要剪枝</h2><p><strong>现象</strong></p><p>接上一次讲的生成决策树，下面给出一张图。</p><img alt="决策树学习中的过渡拟合" style="zoom:50%;" data-src="https://pic2.zhimg.com/80/v2-d6588457cc144c1bad2f87ec77081af1_hd.jpg" class="lazyload"><ul><li>横轴表示在决策树创建过程中树的结点总数，纵轴表示决策树的预测精度。</li><li>实线显示的是决策树在训练集上的精度，虚线显示的则是在一个独立的测试集上测量出来的精度。</li></ul><p><strong>可以看出随着树的增长， 在训练样集上的精度是单调上升的， 然而在独立的测试样例上测出的精度先上升后下降。</strong></p><p><strong>原因</strong></p><p><img alt="原因" data-src="https://pic2.zhimg.com/80/v2-677a5e08d5b55b3b4cb14f7ad6f8eb31_hd.jpg" class="lazyload"></p><ul><li>原因1：噪声、样本冲突，即错误的样本数据。</li><li>原因2：特征即属性不能完全作为分类标准。</li><li>原因3：巧合的规律性，数据量不够大。</li></ul><p>这个时候，就需要对生成树进行修剪，也就是<strong>剪枝</strong>。</p><h2 id="2-2-如何进行剪枝"><a href="#2-2-如何进行剪枝" class="headerlink" title="2.2 如何进行剪枝"></a>2.2 如何进行剪枝</h2><h3 id="预剪枝"><a href="#预剪枝" class="headerlink" title="预剪枝"></a><strong>预剪枝</strong></h3><p>预剪枝就是在完全正确分类训练集之前，较早地停止树的生长。 具体在什么时候停止决策树的生长有多种不同的方法:<br>        (1) 一种最为简单的方法就是在决策树到达一定高度的情况下就停止树的生长。<br>        (2) 到达此结点的实例具有相同的特征向量，而不必一定属于同一类， 也可停止生长。<br>        (3) 到达此结点的实例个数小于某一个阈值也可停止树的生长。</p><p>(4) 还有一种更为普遍的做法是计算每次扩张对系统性能的增益，如果这个增益值小于某个阈值则不进行扩展。</p><p><strong>优点&amp;缺点</strong></p><ul><li><p>由于预剪枝不必生成整棵决策树，且算法相对简单， 效率很高， 适合解决大规模问题。但是尽管这一方法看起来很直接， 但是【<strong>怎样精确地估计何时停止树的增长是相当困难的</strong>】。</p></li><li><p>预剪枝有一个缺点， 即视野效果问题 。 也就是说在相同的标准下，也许当前的扩展会造成过度拟合训练数据，但是更进一步的扩展能够满足要求，也有可能准确地拟合训练数据。这将使得算法过早地停止决策树的构造。</p></li></ul><h3 id="后剪枝"><a href="#后剪枝" class="headerlink" title="后剪枝"></a><strong>后剪枝</strong></h3><p>后剪枝，在已生成过拟合决策树上进行剪枝，可以得到简化版的剪枝决策树。</p><p>这里主要介绍四种：</p><ul><li>REP-错误率降低剪枝</li><li>PEP-悲观剪枝</li><li>CCP-代价复杂度剪枝</li><li>MEP-最小错误剪枝</li></ul><h4 id="REP-Reduced-Error-Pruning-方法"><a href="#REP-Reduced-Error-Pruning-方法" class="headerlink" title="REP(Reduced Error Pruning)方法"></a><strong>REP(Reduced Error Pruning)方法</strong></h4><blockquote><p>对于决策树T 的每棵非叶子树S , 用叶子替代这棵子树. 如果 S 被叶子替代后形成的新树关于D 的误差等于或小于S 关于 D 所产生的误差, 则用叶子替代子树S</p></blockquote><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-ff11945f2e5a8319d82ab53c363ef441_hd.jpg" class="lazyload"></p><p><strong>优点：</strong></p><ul><li>REP 是当前最简单的事后剪枝方法之一。</li><li>它的计算复杂性是线性的。</li><li>和原始决策树相比，修剪后的决策树对未来新事例的预测偏差较小。</li></ul><p><strong>缺点：</strong></p><ul><li>但在数据量较少的情况下很少应用. REP方法趋于过拟合( overfitting) , 这是因为训练数据集中存在的特性在剪枝过程中都被忽略了, 当剪枝数据集比训练数据集小得多时 , 这个问题特别值得注意.</li></ul><h4 id="PEP-Pessimistic-Error-Pruning-方法"><a href="#PEP-Pessimistic-Error-Pruning-方法" class="headerlink" title="PEP(Pessimistic Error Pruning)方法"></a><strong>PEP(Pessimistic Error Pruning)方法</strong></h4><blockquote><p>为了克服 R EP 方法需要独立剪枝数据集的缺点而提出的, 它不需要分离的剪枝数据集，为了提高对未来事例的预测可靠性, <strong>PEP 方法对误差估计增加了连续性校正(continuity correction)</strong>。关于PEP方法的数据解释待后续开专题梳理。</p></blockquote><p><strong>优点：</strong></p><ul><li>PEP方法被认为是当前决策树事后剪枝方法中精度较高的算法之一</li><li>PEP 方法不需要分离的剪枝数据集, 这对于事例较少的问题非常有利</li><li>它的计算时间复杂性也只和未剪枝树的非叶节点数目成线性关系 .</li></ul><p><strong>缺点：</strong></p><p>PEP是唯一使用自顶向下剪枝策略的事后剪枝方法, 这种策略会带来与事前剪枝方法出现的同样问题, 那就是树的某个节点会在该节点的子孙根据同样准则不需要剪裁时也会被剪裁。</p><p><strong>TIPS：</strong></p><p>个人认为，其实以时间复杂度和空间复杂度为代价，PEP是可以自下而上的，这并不是必然的。</p><h4 id="MEP-Minimum-Error-Pruning-方法"><a href="#MEP-Minimum-Error-Pruning-方法" class="headerlink" title="MEP(Minimum Error Pruning)方法"></a><strong>MEP(Minimum Error Pruning)方法</strong></h4><blockquote><p>MEP 方法的基本思路是采用自底向上的方式, 对于树中每个非叶节点, 首先计算该节点的误差 Er(t) . 然后, 计算该节点每个分枝的误差Er(Tt) , 并且加权相加, 权为每个分枝拥有的训练样本比例. 如果 Er(t) 大于 Er(Tt) , 则保留该子树; 否则, 剪裁它。</p></blockquote><p><strong>优点：</strong></p><ul><li>MEP方法不需要独立的剪枝数据集, 无论是初始版本, 还是改进版本, 在剪枝过程中, 使用的信息都来自于训练样本集.</li><li>它的计算时间复杂性也只和未剪枝树的非叶节点数目成线性关系 .</li></ul><p><strong>缺点：</strong></p><p>类别平均分配的前提假设现实几率不大&amp;对K太过敏感</p><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-5e7deee0ee978be2eec60328192affc6_hd.jpg" class="lazyload"></p><p>对此，也有改进算法，我没有深入研究。</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-3ffc529242dbb52dcb4946e37fed92f0_hd.jpg" class="lazyload"></p><h4 id="CCP-Cost-Complexity-Pruning-方法"><a href="#CCP-Cost-Complexity-Pruning-方法" class="headerlink" title="CCP(Cost-Complexity Pruning)方法"></a><strong>CCP(Cost-Complexity Pruning)方法</strong></h4><blockquote><p>CCP 方法就是著名的CART(Classificationand Regression Trees)剪枝算法，它包含两个步骤:<br>                (1) 自底向上，通过对原始决策树中的修剪得到一系列的树 {T0,T1,T2,…,Tt}， 其中Tia 是由Ti中的一个或多个子树被替换所得到的，T0为未经任何修剪的原始树，几为只有一个结点的树。</p><p>​        (2) 评价这些树，根据真实误差率来选择一个最优秀的树作为最后被剪枝的树。</p></blockquote><p><strong>缺点：</strong></p><p>生成子树序列 T ( α) 所需要的时间和原决策树非叶节点的关系是二次的, 这就意味着如果非叶节点的数目随着训练例子记录数目线性增加, 则CCP方法的运行时间和训练数据记录数的关系也是二次的 . 这就比本文中将要介绍的其它剪枝方法所需要的时间长得多, 因为其它剪枝方法的运行时间和非叶节点的关系是线性的.</p><p><strong>对比四种方法</strong></p><table><thead><tr><th><strong>剪枝名称</strong></th><th><strong>剪枝方式</strong></th><th><strong>计算复杂度</strong></th><th><strong>误差估计</strong></th></tr></thead><tbody><tr><td>REP</td><td>自底向上</td><td>0(n)</td><td>剪枝集上误差估计</td></tr><tr><td>PEP</td><td>自顶向下</td><td>o(n)</td><td>使用连续纠正</td></tr><tr><td>CCP</td><td>自底向上</td><td>o(n2)</td><td>标准误差</td></tr><tr><td>MEP</td><td>自底向上</td><td>o(n)</td><td>使用连续纠正</td></tr></tbody></table><p>① MEP比PEP不准确，且树大。两者都不需要额外数据集，故当数据集小的时候可以用。对比公式，如果类（Label）多，则用MEP；PEP在数据集uncertain时错误多，不使用。</p><p>② REP最简单且精度高，但需要额外数据集；CCP精度和REP差不多，但树小。</p><p>③ 如果数据集多（REP&amp;CCP←复杂但树小）</p><p>④ 如果数据集小（MEP←不准确树大&amp;PEP←不稳定）</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h1><p>决策树是机器学习算法中比较容易受影响的，从而导致过拟合，有效的剪枝能够减少过拟合发生的概率。</p><p>剪枝主要分为两种：预剪枝(early stopping)，后剪枝，一般说剪枝都是指后剪枝，预剪枝一般叫做early stopping，后剪枝决策树在数学上更加严谨，得到的树至少是和early stopping得到的一样好。</p><p><strong>预剪枝：</strong></p><p>预剪枝的核心思想是在对每一个节点划分之前先进行计算，如果当前节点的划分并不能够带来模型泛化能力的提升就不再进行划分，对于未能够区分的样本种类（此时可能存在不同的样本类别同时存在于节点中），按照投票（少数服从多数）的原则进行判断。</p><p>简单一点的方法可以通过测试集判断划分过后的测试集准确度能否得到提升进行确定，如果准确率不提升变不再进行节点划分。</p><p>这样做的好处是在降低过拟合风险的同时减少了训练时间的开销，但是可能会出现欠拟合的风险：虽然一次划分可能会导致准确率的降低，但是再进行几次划分后，可能会使得准确率显著提升。</p><p><strong>后剪枝：</strong></p><p>后剪枝的核心思想是让算法生成一个完全决策树，然后从最低层向上计算决定是否剪枝。</p><p>同样的，方法可以通过在测试集上的准确率进行判断，如果剪枝后准确率有所提升，则进行剪枝。</p><p>后剪枝的泛化能力往往高于预剪枝，但是时间花销相对较大。</p><p><strong>剪枝方法的选择</strong></p><p>如果不在乎计算量的问题，后剪枝策略一般更加常用，更加有效。</p><p>后剪枝中REP和CCP通常需要训练集和额外的验证集，计算量更大。</p><p>有研究表明，通常reduced error pruning是效果最好的，但是也不会比其他的好太多。</p><p>经验表明，限制节点的最小样本个数对防止过拟合很重要，输的最大depth的设置往往要依赖于问题的复杂度，另外树的叶节点总个数和最大depth是相关的，所以有些设置只会要求指定其中一个参数。</p><p>无论是预剪枝还是后剪枝都是为了减少决策树过拟合的情况，在实际运用中，我使用了python中的sklearn库中的函数。</p><p>函数中的max_depth参数可以控制树的最大深度，即最多产生几层节点</p><p>函数中的min_samples_split参数可以控制最小划分样本，即当节点样本数大于阈值时才进行下一步划分。</p><p>函数中min_samples_leaf参数可以控制最后的叶子中最小的样本数量，即最后的分类中的样本需要高于阈值</p><p>上述几个参数的设置均可以从控制过拟合的方面进行理解，通过控制树的层数、节点划分样本数量以及每一个分类的样本数可以在一定程度上减少对于样本个性的关注。具体设置需要根据实际情况进行设置</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> Decision Tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Decision Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列之决策树算法（02）：决策树的生成</title>
      <link href="/2019/12/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95%EF%BC%8802%EF%BC%89%EF%BC%9A%E5%86%B3%E7%AD%96%E6%A0%91%E7%9A%84%E7%94%9F%E6%88%90/"/>
      <url>/2019/12/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95%EF%BC%8802%EF%BC%89%EF%BC%9A%E5%86%B3%E7%AD%96%E6%A0%91%E7%9A%84%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>上文讲到决策树的特征选择会根据不同的算法选择不同的分裂参考指标，例如信息增益、信息增益比和基尼指数，本文完整分析记录决策树的详细生成过程和剪枝处理。</p><h2 id="2-决策树的生成"><a href="#2-决策树的生成" class="headerlink" title="2. 决策树的生成"></a>2. 决策树的生成</h2><p> <strong>示例数据表格</strong></p><p>    文章所使用的数据集如下，来源于《数据分析实战45讲》17讲中</p><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-393024075528471f43f52891d29320be_hd.jpg" class="lazyload"></p><h3 id="2-1-相关概念阐述"><a href="#2-1-相关概念阐述" class="headerlink" title="2.1 相关概念阐述"></a><strong>2.1 相关概念阐述</strong></h3><h4 id="2-1-1-决策树"><a href="#2-1-1-决策树" class="headerlink" title="2.1.1 决策树"></a><strong>2.1.1 决策树</strong></h4><p> 以上面的表格数据为例，比如我们考虑要不要去打篮球，先看天气是不是阴天，是阴天的话，外面刮风没，没刮风我们就去，刮风就不去。决策树就是把上面我们判断背后的逻辑整理成一个结构图，也就是一个树状结构。</p><h4 id="2-1-2-ID3、C4-5、CART"><a href="#2-1-2-ID3、C4-5、CART" class="headerlink" title="2.1.2 ID3、C4.5、CART"></a><strong>2.1.2 ID3、C4.5、CART</strong></h4><p>在决策树构造中有三个著名算法：ID3、C4.5、CART，ID3算法计算的是信息增益，C4.5计算使用的是增益率、CART计算使用的是基尼系数，关于这部分内容可以参考上文【<a href="https://dataquaner.github.io/2019/12/17/机器学习系列之决策树算法（01）：决策树特征选择/">机器学习系列之决策树算法（01）：决策树特征选择</a>】下面简单介绍下其算法，这里也不要求完全看懂，扫一眼有个印象就行，在后面的例子中有计算示例，回过头结合看应该就懂了。</p><h5 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a><strong>信息熵</strong></h5><p> 在信息论中，随机离散事件的出现的概率存在不确定性，为了衡量这种信息的不确定性，信息学之父香农引入了信息熵的概念，并给出了计算信息熵的数学公式。</p><p>​                                                            Entopy(t)=-Σp(i|t)log2p(i|t)</p><h5 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a><strong>信息增益</strong></h5><p>信息增益指的是划分可以带来纯度的提高，信息熵的下降。特征的信息熵越大代表特征的不确定性越大，代表得知了该特征后，数据集的信息熵会下降更多，即信息增益越大。它的计算公式是父亲节点的信息熵减去所有子节点的信息熵。信息增益的公式可以表示为：</p><p>​                                        Gain(D,a)=Entropy(D)- Σ|Di|/|D|Entropy(Di)</p><h5 id="信息增益率"><a href="#信息增益率" class="headerlink" title="信息增益率"></a><strong>信息增益率</strong></h5><p> 信息增益率 = 信息增益 / 属性熵。属性熵，就是每种属性的信息熵，比如天气的属性熵的计算如下,天气有晴阴雨,各占3/7,2/7,2/7：</p><p>​                H(天气)= -(3/7 * log2(3/7) + 2/7 * log2(2/7) + 2/7 * log2(2/7))</p><h5 id="基尼系数"><a href="#基尼系数" class="headerlink" title="基尼系数"></a><strong>基尼系数</strong></h5><p> 基尼系数在经济学中用来衡量一个国家收入差距的常用指标.当基尼指数大于0.4的时候,说明财富差异悬殊.基尼系数在0.2-0.4之间说明分配合理,财富差距不大.扩展阅读下<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%E5%9F%BA%E5%B0%BC%E7%B3%BB%E6%95%B0">基尼系数</a></p><p> 基尼系数本身反应了样本的不确定度.当基尼系数越小的时候,说明样本之间的差异性小,不确定程度低.</p><p> CART算法在构造分类树的时候,会选择基尼系数最小的属性作为属性的划分.</p><p> 基尼系数的计算公式如下:</p><p>​                            Gini = 1 – Σ (Pi)2 for i=1 to number of classes</p><h3 id="2-2-完整生成过程"><a href="#2-2-完整生成过程" class="headerlink" title="2.2 完整生成过程"></a><strong>2.2 完整生成过程</strong></h3><p> 下面是一个完整的决策树的构造生成过程，已完整开头所给的数据为例</p><h4 id="2-2-1-根节点的选择"><a href="#2-2-1-根节点的选择" class="headerlink" title="2.2.1 根节点的选择"></a><strong>2.2.1 根节点的选择</strong></h4><p> 在上面的列表中有四个属性:天气,温度,湿度,刮风.需要先计算出这四个属性的信息增益、信息增益率、基尼系数</p><p> 数据集中有7条数据，3个打篮球，4个不打篮球，不打篮球的概率为4/7,打篮球的概率为3/7,则根据信息熵的计算公式可以得到根节点的信息熵为：</p><p>​                        Ent(D)=-(4/7 * log2(4/7) + 3/7 * log2(3/7))=0.985</p><h5 id="天气"><a href="#天气" class="headerlink" title="天气"></a><strong>天气</strong></h5><p>    其数据表格如下:</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-4977ea2a875ea67cb75588eb04b6aee5_hd.jpg" class="lazyload"></p><h6 id="信息增益计算"><a href="#信息增益计算" class="headerlink" title="信息增益计算"></a><strong>信息增益计算</strong></h6><p>如果将天气作为属性划分，分别会有三个叶节点：晴天、阴天、小雨，其中晴天2个不打篮球，1个打篮球；阴天1个打篮球，1个不打篮球；小雨1个打篮球，1个不打篮球，其对应相应的信息熵如下：</p><p>D(晴天)=-(1/3 * log2(1/3) + 2/3 * log2(2/3)) = 0.981</p><p>D(阴天)=-(1/2 * log2(1/2) + 1/2 * log2(1/2)) = 1.0</p><p>D(雨天)=-(1/2 * log2(1/2) + 1/2 * log2(1/2)) = 1.0</p><p>在数据集中晴天有3条数据，阴天有2条数据，雨天有2条数据，对应的概率为3/7、2/7、2/7，那么作为子节点的归一化信息熵为：</p><p>3/7 * 0.918 + 2/7 * 1.0 * 2/7 * 1.0 = 0.965</p><p>其信息增益为：</p><p>Gain(天气)=0.985 - 0.965 = 0.020</p><h6 id="信息增益率计算"><a href="#信息增益率计算" class="headerlink" title="信息增益率计算"></a><strong>信息增益率计算</strong></h6><p> 天气有三个选择，晴天有3条数据，阴天有2条数据，雨天有2条数据，对应的概率为3/7、2/7、2/7，其对应的属性熵为：</p><p>H(天气)=-(3/7 * log2(3/7) + 2/7 * log2(2/7) + 2/7 * log2(2/7)) = 1.556</p><p> 则其信息增益率为：</p><p>Gain_ratio(天气)=0.020/1.556=0.012</p><h6 id="基尼系数计算"><a href="#基尼系数计算" class="headerlink" title="基尼系数计算"></a><strong>基尼系数计算</strong></h6><ul><li>Gini(天气=晴)=1 - (1/3)^2 - (2/3)^2 = 1 - 1/9 - 4/9 = 4/9</li><li>Gini(天气=阴)=1 - (1/2)^2 - (1/2)^2 = 1 - 1/4 - 1/4 = 0.5</li><li>Gini(天气=小雨)=1 - (1/2)^2 - (1/2)^2 = 1 - 1/4 - 1/4 = 0.5</li><li>Gini(天气)=(3/7) * 4/9 + (2/7) * 0.5 + (2/7) * 0.5 = 4/21 + 1/7 + 1/7 = 10/21</li></ul><h5 id="温度"><a href="#温度" class="headerlink" title="温度"></a><strong>温度</strong></h5><p>  其数据表格如下:</p><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-74ad946b56a27f3bc480ba07f31552de_hd.jpg" class="lazyload"></p><h6 id="信息增益计算-1"><a href="#信息增益计算-1" class="headerlink" title="信息增益计算"></a><strong>信息增益计算</strong></h6><p>    各情况的信息熵如下：</p><p>D(高)=-(2/4 * log2(2/4) + 2/4 * log2(2/4)) = 1.0</p><p>D(中)=-(1/2 * log2(1/2) + 1/2 * log2(1/2)) = 1.0</p><p>D(低)=-(0/1 * log2(0/1) + 1/1 * log2(1/1)) = 0.0</p><p>    作为子节点的归一化信息熵为：</p><p>4/7 * 1.0 + 2/7 * 1.0 * 1/7 * 0.0 = 0.857</p><p>    其信息增益为：</p><p>Gain(温度)=0.985 - 0.857 = 0.128</p><h6 id="信息增益率计算-1"><a href="#信息增益率计算-1" class="headerlink" title="信息增益率计算"></a><strong>信息增益率计算</strong></h6><p>    属性熵为：</p><p>H(温度)=-(4/7 * log2(4/7) + 2/7 * log2(2/7) + 1/7 * log2(1/7)) = 1.378</p><p>    则其信息增益率为：</p><p>Gain_ratio(温度)=0.128/1.378=0.0928</p><h6 id="基尼系数计算-1"><a href="#基尼系数计算-1" class="headerlink" title="基尼系数计算"></a><strong>基尼系数计算</strong></h6><ul><li>Gini(温度=高)=1 - (2/4)^2 - (2/4)^2 = 1 - 1/4 - 1/4 = 0.5</li><li>Gini(温度=中)=1 - (1/2)^2 - (1/2)^2 = 1 - 1/4 - 1/4 = 0.5</li><li>Gini(温度=低)=1 - (0/1)^2 - (1/1)^2 = 1 - 0 - 1 = 0</li><li>Gini(温度)=4/7 * 0.5 + 2/7 * 0.5 + 1/7 * 0 = 3/7</li></ul><h5 id="湿度"><a href="#湿度" class="headerlink" title="湿度"></a><strong>湿度</strong></h5><p>    其数据表格如下:</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-423f80f054a8d86eed652afff6a6c914_hd.jpg" class="lazyload"></p><h6 id="信息增益计算-2"><a href="#信息增益计算-2" class="headerlink" title="信息增益计算"></a><strong>信息增益计算</strong></h6><p>    各情况的信息熵如下：</p><p>D(高)=-(2/4 * log2(2/4) + 2/4 * log2(2/4)) = 1.0</p><p>D(中)=-(2/3 * log2(2/3) + 1/3 * log2(1/3)) = 0.918</p><p>    作为子节点的归一化信息熵为：</p><p>4/7 * 1.0 + 3/7 * 0.918 = 0.964</p><p>    其信息增益为：</p><p>Gain(湿度)=0.985 - 0.964 = 0.021</p><h6 id="信息增益率计算-2"><a href="#信息增益率计算-2" class="headerlink" title="信息增益率计算"></a><strong>信息增益率计算</strong></h6><p>    属性熵为：</p><p>H(湿度)=-(4/7 * log2(4/7) + 3/7 * log2(3/7) = 0.985</p><p>    则其信息增益率为：</p><p>Gain_ratio(湿度)=0.021/0.985=0.021</p><h6 id="基尼系数计算-2"><a href="#基尼系数计算-2" class="headerlink" title="基尼系数计算"></a><strong>基尼系数计算</strong></h6><ul><li>Gini(湿度=高)=1 - (2/4)^2 - (2/4)^2 = 1 - 1/4 - 1/4 = 0.5</li><li>Gini(湿度=中)=1 - (2/3)^2 - (1/3)^2 = 1 - 4/9 - 1/9 = 4/9</li><li>Gini(湿度)=(4/7) * 0.5 + (3/7) * 4/9 = 2/7 + 4/21 = 10/21 ~ 0.47619</li></ul><h6 id="刮风"><a href="#刮风" class="headerlink" title="刮风"></a><strong>刮风</strong></h6><p>    其数据表格如下:</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-edb75f5790519fcee2dd6317f4d5557d_hd.jpg" class="lazyload"></p><h6 id="信息增益计算-3"><a href="#信息增益计算-3" class="headerlink" title="信息增益计算"></a><strong>信息增益计算</strong></h6><p>    各情况的信息熵如下：</p><p>D(是)=-(2/3 * log2(2/3) + 1/3 * log2(1/3)) = 0.918</p><p>D(否)=-(2/4 * log2(2/4) + 2/4 * log2(2/4)) = 1.0</p><p>    作为子节点的归一化信息熵为：</p><p>3/7 * 1.0 + 4/7 * 0.918 = 0.964</p><p>    其信息增益为：</p><p>Gain(刮风)=0.985 - 0.964 = 0.021</p><h6 id="信息增益率计算-3"><a href="#信息增益率计算-3" class="headerlink" title="信息增益率计算"></a><strong>信息增益率计算</strong></h6><p>    属性熵为：</p><p>H(刮风)=-(4/7 * log2(4/7) + 3/7 * log2(3/7) = 0.985</p><p>    则其信息增益率为：</p><p>Gain_ratio(刮风)=0.021/0.985=0.021</p><h6 id="基尼系数计算-3"><a href="#基尼系数计算-3" class="headerlink" title="基尼系数计算"></a><strong>基尼系数计算</strong></h6><ul><li>Gini(刮风=是)=1 - (2/3)^2 - (1/3)^2 = 1 - 4/9 - 1/9 = 4/9</li><li>Gini(刮风=否)=1 - (2/4)^2 - (2/4)^2 = 1 - 1/4 - 1/4 = 0.5</li><li>Gini(刮风)=(4/7) * 0.5 + (3/7) * 4/9 = 2/7 + 4/21 = 10/21 ~ 0.47619</li></ul><h5 id="根节点的选择"><a href="#根节点的选择" class="headerlink" title="根节点的选择"></a><strong>根节点的选择</strong></h5><p>  如下汇总所有接口,第一个为信息增益的，第二个为信息增益率的，第三个为基尼系数的。其中信息增益和信息增益率选择最大的，基尼系数选择最小的。从下面的结果可以得到选择为：温度</p><p><strong>信息增益</strong></p><ul><li><p>Gain(天气)=0.985 - 0.965 = 0.020</p></li><li><p>Gain(温度)=0.985 - 0.857 = 0.128</p></li><li><p>Gain(湿度)=0.985 - 0.964 = 0.021</p></li><li><p>Gain(刮风)=0.985 - 0.964 = 0.021</p></li></ul><p><strong>信息增益率</strong></p><ul><li>Gain_ratio(天气)=0.020/1.556=0.012</li><li>Gain_ratio(温度)=0.128/1.378=0.0928</li><li>Gain_ratio(湿度)=0.021/0.985=0.021</li><li>Gain_ratio(刮风)=0.021/0.985=0.021</li></ul><p><strong>基尼系数</strong></p><ul><li>Gini(天气)=(3/7) * 4/9 + (2/7) * 0.5 + (2/7) * 0.5 = 0.47619</li><li>Gini(温度)=4/7 * 0.5 + 2/7 * 0.5 + 1/7 * 0 = 0.42857</li><li>Gini(湿度)=(4/7) * 0.5 + (3/7) * 4/9 = 2/7 + 4/21 = 10/21 ~ 0.47619</li><li>Gini(刮风)=(4/7) * 0.5 + (3/7) * 4/9 = 2/7 + 4/21 = 10/21 ~ 0.47619</li></ul><p>确定根节点以后,大致的树结构如下，温度低能确定结果，高和中需要进一步的进行分裂，从剩下的数据中再次进行属性选择:</p><ul><li>根节点<ul><li>子节点温度高:(待进一步进行选择)</li><li>子节点温度中:(待进一步进行选择)</li><li>叶节点温度低:不打篮球(能直接确定为不打篮球)</li></ul></li></ul><h4 id="2-2-2-子节点温度高的选择"><a href="#2-2-2-子节点温度高的选择" class="headerlink" title="2.2.2 子节点温度高的选择"></a><strong>2.2.2 子节点温度高的选择</strong></h4><p>    其剩下的数据集如下,温度不再进行下面的节点选择参与:</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-86c2e574fc2309e9dff98e8205c0dff4_hd.jpg" class="lazyload"></p><p>    根据信息熵的计算公式可以得到子节点温度高的信息熵为：</p><p>​                                                Ent(D)=-(2/4 * log2(2/4) + 2/4 * log2(2/4)) = 1.0</p><h5 id="天气-1"><a href="#天气-1" class="headerlink" title="天气"></a><strong>天气</strong></h5><p>    其数据表格如下:</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-72771013ffea869ed0ce76c7f8998f79_hd.jpg" class="lazyload"></p><h6 id="信息增益计算-4"><a href="#信息增益计算-4" class="headerlink" title="信息增益计算"></a><strong>信息增益计算</strong></h6><p>    相应的信息熵如下：</p><p>D(晴天)=-(1/2 * log2(1/2) + 1/2 * log2(1/2)) = 1.0</p><p>D(阴天)=-(1/1 * log2(1/1) + 0/1 * log2(0/1)) = 0.0</p><p>D(雨天)=-(1/1 * log2(1/1) + 0/1 * log2(0/1)) = 0.0</p><p>    归一化信息熵为：</p><p>2/4 * 1.0 + 1/4 * 0.0 * 1/4 * 0.0 = 0.5</p><p>    其信息增益为：</p><p>Gain(天气)=1.0 - 0.5 = 0.5</p><h6 id="信息增益率计算-4"><a href="#信息增益率计算-4" class="headerlink" title="信息增益率计算"></a><strong>信息增益率计算</strong></h6><p>    对应的属性熵为：</p><p>H(天气)=-(2/4 * log2(2/4) + 1/4 * log2(1/4) + 1/4 * log2(1/4)) = 1.5</p><p>    则其信息增益率为：</p><p>Gain_ratio(天气)=0.5/1.5=0.33333</p><h6 id="基尼系数计算-4"><a href="#基尼系数计算-4" class="headerlink" title="基尼系数计算"></a><strong>基尼系数计算</strong></h6><ul><li>Gini(天气=晴)=1 - (1/2)^2 - (1/2)^2 = 1 - 1/4 - 1/4 = 0.5</li><li>Gini(天气=阴)=1 - (1/1)^2 - (0/1)^2 = 0</li><li>Gini(天气=小雨)=1 - (1/1)^2 - (0/1)^2 = 0</li><li>Gini(天气)=2/4 * 0.5 + 1/4 * 0 + 1/4 * 0 = 0.25</li></ul><h5 id="湿度-1"><a href="#湿度-1" class="headerlink" title="湿度"></a><strong>湿度</strong></h5><p>    其数据表格如下:</p><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-ea98c22052cf1246618f266c52be998e_hd.jpg" class="lazyload"></p><h6 id="信息增益计算-5"><a href="#信息增益计算-5" class="headerlink" title="信息增益计算"></a><strong>信息增益计算</strong></h6><p>    各情况的信息熵如下：</p><p>D(高)=-(2/2 * log2(2/2) + 0/2 * log2(0/2)) = 0.0</p><p>D(中)=-(0/2 * log2(0/2) + 2/2 * log2(2/2)) = 0.0</p><p>    作为子节点的归一化信息熵为：</p><p>2/4 * 0.0 + 2/4 * 0.0 = 0.0</p><p>    其信息增益为：</p><p>Gain(湿度)=1.0 - 0.0 = 1.0</p><h6 id="信息增益率计算-5"><a href="#信息增益率计算-5" class="headerlink" title="信息增益率计算"></a><strong>信息增益率计算</strong></h6><p>    属性熵为：</p><p>H(湿度)=-(2/4 * log2(2/4) + 2/4 * log2(2/4) = 1.0</p><p>    则其信息增益率为：</p><p>Gain_ratio(湿度)=1.0/1.0=1.0</p><h6 id="基尼系数计算-5"><a href="#基尼系数计算-5" class="headerlink" title="基尼系数计算"></a><strong>基尼系数计算</strong></h6><ul><li>Gini(湿度=高)=1 - (2/2)^2 - (0/2)^2 = 0</li><li>Gini(湿度=中)=1 - (0/2)^2 - (2/2)^2 = 0</li><li>Gini(湿度)=(2/4) * 0 + (2/4) * 0 = 0</li></ul><h5 id="刮风-1"><a href="#刮风-1" class="headerlink" title="刮风"></a><strong>刮风</strong></h5><p>    其数据表格如下:</p><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-ba94b90f801904bae450796e8a5db0be_hd.jpg" class="lazyload"></p><h6 id="信息增益计算-6"><a href="#信息增益计算-6" class="headerlink" title="信息增益计算"></a><strong>信息增益计算</strong></h6><p>    各情况的信息熵如下：</p><p>D(是)=-(0/1 * log2(0/1) + 1/1 * log2(1/1)) = 0</p><p>D(否)=-(2/3 * log2(2/3) + 1/3 * log2(1/3)) = 0.918</p><p>    作为子节点的归一化信息熵为：</p><p>1/4 * 0.0 + 3/4 * 0.918 = 0.688</p><p>    其信息增益为：</p><p>Gain(刮风)=1.0 - 0.688 = 0.312</p><h6 id="信息增益率计算-6"><a href="#信息增益率计算-6" class="headerlink" title="信息增益率计算"></a><strong>信息增益率计算</strong></h6><p>    属性熵为：</p><p>H(刮风)=-(1/3 * log2(1/3) + 2/3 * log2(2/3) = 0.918</p><p>    则其信息增益率为：</p><p>Gain_ratio(刮风)=0.312/0.918=0.349</p><h6 id="基尼系数计算-6"><a href="#基尼系数计算-6" class="headerlink" title="基尼系数计算"></a><strong>基尼系数计算</strong></h6><ul><li><p>Gini(刮风=是)=1 - (0/1)^2 - (1/1)^2 = 0</p></li><li><p>Gini(刮风=否)=1 - (2/3)^2 - (1/3)^2 = 1 - 4/9 - 1/9 = 4/9</p></li><li><p>Gini(刮风)=(1/4) * 0 + (3/4) * 4/9 = 1/3 = 0.333333</p></li></ul><p><strong>子节点温度高的选择</strong></p><p>    如下汇总所有接口,第一个为信息增益的，第二个为信息增益率的，第三个为基尼系数的。其中信息增益和信息增益率选择最大的，基尼系数选择最小的。从下面的结果可以得到选择为：湿度</p><ul><li>Gain(天气)=1.0 - 0.5 = 0.5</li><li>Gain(湿度)=1.0 - 0.0 = 1.0</li><li>Gain(刮风)=1.0 - 0.688 = 0.312</li><li>Gain_ratio(天气)=0.5/1.5=0.33333</li><li>Gain_ratio(湿度)=1.0/1.0=1.0</li><li>Gain_ratio(刮风)=0.312/0.918=0.349</li><li>Gini(天气)=2/4 * 0.5 + 1/4 * 0 + 1/4 * 0 = 0.25</li><li>Gini(湿度)=(2/4) * 0 + (2/4) * 0 = 0</li><li>Gini(刮风)=(1/4) * 0 + (3/4) * 4/9 = 1/3 = 0.333333</li></ul><p>    确定跟节点以后,大致的树结构如下，选择湿度作为分裂属性后能直接确定结果:</p><ul><li>根节点<ul><li>子节点温度高<ul><li>叶节点湿度高：打篮球</li><li>叶节点湿度中：不打篮球</li></ul></li><li>子节点温度中:(待进一步进行选择)<ul><li>叶节点温度低:不打篮球(能直接确定为不打篮球)</li></ul></li></ul></li></ul><h4 id="2-2-3-子节点温度中的选择"><a href="#2-2-3-子节点温度中的选择" class="headerlink" title="2.2.3 子节点温度中的选择"></a><strong>2.2.3 子节点温度中的选择</strong></h4><p>    其剩下的数据集如下,温度不再进行下面的节点选择参与:</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-3f1b0c5e060288599f90c428441aaabc_hd.jpg" class="lazyload"></p><p>    根据信息熵的计算公式可以得到子节点温度高的信息熵为：</p><p>Ent(D)=-(1/2 * log2(1/2) + 1/2 * log2(1/2)) = 1.0</p><h5 id="天气-2"><a href="#天气-2" class="headerlink" title="天气"></a><strong>天气</strong></h5><p>    其数据表格如下:</p><p><img alt="img" data-src="https://pic4.zhimg.com/80/v2-7ac9cd99fc8388c6c3f34fdb2e132b57_hd.jpg" class="lazyload"></p><h6 id="信息增益计算-7"><a href="#信息增益计算-7" class="headerlink" title="信息增益计算"></a><strong>信息增益计算</strong></h6><p>    相应的信息熵如下：</p><p>D(晴天)=-(1/1 * log2(1/1) + 0/1 * log2(0/1)) = 0.0 D</p><p>(阴天)=-(0/1 * log2(0/1) + 1/1 * log2(1/1)) = 0.0</p><p>    归一化信息熵为：</p><p>1/2 * 0.0 + 1/2 * 0.0 = 0</p><p>    其信息增益为：</p><p>Gain(天气)=1.0 - 0 = 1.0</p><h6 id="信息增益率计算-7"><a href="#信息增益率计算-7" class="headerlink" title="信息增益率计算"></a><strong>信息增益率计算</strong></h6><p>    对应的属性熵为：</p><p>H(天气)=-(1/2 * log2(1/2) + 1/2 * log2(1/2)) = 1.0</p><p>    则其信息增益率为：</p><p>Gain_ratio(天气)=1.0/1.0=1.0</p><h6 id="基尼系数计算-7"><a href="#基尼系数计算-7" class="headerlink" title="基尼系数计算"></a><strong>基尼系数计算</strong></h6><ul><li>Gini(天气=晴)=1 - (1/1)^2 - (0/1)^2 = 0</li><li>Gini(天气=阴)=1 - (0/1)^2 - (1/1)^2 = 0</li><li>Gini(天气)=1/2 * 0.0 + 1/2 * 0.0 = 0</li></ul><h5 id="湿度-2"><a href="#湿度-2" class="headerlink" title="湿度"></a><strong>湿度</strong></h5><p>    其数据表格如下:</p><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-a27cfcdbbde0c07ab39cbdac34b8e6da_hd.jpg" class="lazyload"></p><h6 id="信息增益计算-8"><a href="#信息增益计算-8" class="headerlink" title="信息增益计算"></a><strong>信息增益计算</strong></h6><p>    各情况的信息熵如下：</p><p>D(高)=-(0/1 * log2(0/1) + 1/1 * log2(1/1)) = 0.0</p><p>D(中)=-(1/1 * log2(1/1) + 0/1 * log2(0/1)) = 0.0</p><p>    作为子节点的归一化信息熵为：</p><p>1/2 * 0.0 + 1/2 * 0.0 = 0</p><p>    其信息增益为：</p><p>Gain(湿度)=1.0 - 0.0 = 1.0</p><h6 id="信息增益率计算-8"><a href="#信息增益率计算-8" class="headerlink" title="信息增益率计算"></a><strong>信息增益率计算</strong></h6><p>    属性熵为：</p><p>H(湿度)=-(1/2 * log2(1/2) + 1/2 * log2(1/2)) = 1.0</p><p>    则其信息增益率为：</p><p>Gain_ratio(湿度)=1.0/1.0=1.0</p><h6 id="基尼系数计算-8"><a href="#基尼系数计算-8" class="headerlink" title="基尼系数计算"></a><strong>基尼系数计算</strong></h6><ul><li>Gini(湿度=高)=1 - (0/1)^2 - (1/1)^2 = 0</li><li>Gini(湿度=中)=1 - (1/1)^2 - (0/1)^2 = 0</li><li>Gini(湿度)=1/2 * 0.0 + 1/2 * 0.0 = 0</li></ul><h5 id="刮风-2"><a href="#刮风-2" class="headerlink" title="刮风"></a><strong>刮风</strong></h5><p>    其数据表格如下:</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-887ebcf7eecd07ee13ca02d024a3b321_hd.jpg" class="lazyload"></p><h6 id="信息增益计算-9"><a href="#信息增益计算-9" class="headerlink" title="信息增益计算"></a><strong>信息增益计算</strong></h6><p>    各情况的信息熵如下：</p><p>D(是)=-(1/2 * log2(1/2) + 1/2 * log2(1/2)) = 1.0</p><p>    作为子节点的归一化信息熵为：</p><p>1/1 * 1.0 = 1.0</p><p>    其信息增益为：</p><p>Gain(刮风)=1.0 - 1.0 = 0</p><h6 id="信息增益率计算-9"><a href="#信息增益率计算-9" class="headerlink" title="信息增益率计算"></a><strong>信息增益率计算</strong></h6><p>    属性熵为：</p><p>H(刮风)=-(2/2 * log2(2/2) = 0.0</p><p>    则其信息增益率为：</p><p>Gain_ratio(刮风)=0/0 = 0</p><h6 id="基尼系数计算-9"><a href="#基尼系数计算-9" class="headerlink" title="基尼系数计算"></a><strong>基尼系数计算</strong></h6><ul><li>Gini(刮风=是)=1 - (1/2)^2 - (1/2)^2 = 0.5</li><li>Gini(刮风)=2/2 * 0.5 = 0.5</li></ul><p><strong>子节点温度中的选择</strong></p><p>如下汇总所有接口,第一个为信息增益的，第二个为信息增益率的，第三个为基尼系数的。其中信息增益和信息增益率选择最大的，基尼系数选择最小的。从下面的结果可以得到天气和湿度是一样好的，我们随机选天气吧</p><ul><li>Gain(天气)=1.0 - 0 = 1.0</li><li>Gain(湿度)=1.0 - 0.0 = 1.0</li><li>Gain(刮风)=1.0 - 1.0 = 0</li><li>Gain_ratio(天气)=1.0/1.0=1.0</li><li>Gain_ratio(湿度)=1.0/1.0=1.0</li><li>Gain_ratio(刮风)=0/0 = 0</li><li>Gini(天气)=1/2 * 0.0 + 1/2 * 0.0 = 0</li><li>Gini(湿度)=1/2 * 0.0 + 1/2 * 0.0 = 0</li><li>Gini(刮风)=2/2 * 0.5 = 0.5</li></ul><p>    确定跟节点以后,大致的树结构如下，选择天气作为分裂属性后能直接确定结果:</p><ul><li>根节点<ul><li>子节点温度高<ul><li>叶节点湿度高：打篮球</li><li>叶节点湿度中：不打篮球</li></ul></li><li>子节点温度中<ul><li>叶节点天气晴：打篮球</li><li>叶节点天气阴：不打篮球</li><li>叶节点温度低:不打篮球(能直接确定为不打篮球)</li></ul></li></ul></li></ul><h4 id="2-2-4-最终的决策树"><a href="#2-2-4-最终的决策树" class="headerlink" title="2.2.4 最终的决策树"></a><strong>2.2.4 最终的决策树</strong></h4><p>    在上面的步骤已经进行完整的演示，得到当前数据一个完整的决策树：</p><ul><li>根节点<ul><li>子节点温度高<ul><li>叶节点湿度高：打篮球</li><li>叶节点湿度中：不打篮球</li></ul></li><li>子节点温度中<ul><li>叶节点天气晴：打篮球</li><li>叶节点天气阴：不打篮球</li><li>叶节点温度低:不打篮球(能直接确定为不打篮球)</li></ul></li></ul></li></ul><h2 id="3-思考"><a href="#3-思考" class="headerlink" title="3. 思考"></a><strong>3. 思考</strong></h2><p> 在构造的过程中我们可以发现，有可能同一个属性在同一级会被选中两次，比如上面的决策树中子节点温度高中都能选中温度作为分裂属性，这样是否合理？</p><p> 完整的构造整个决策树后，发现整个决策树的高度大于等于属性数量，感觉决策树应该是构造时间较长，但用于决策的时候很快，时间复杂度也就是O(n)</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> Decision Tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Decision Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客时间《数据分析45讲总结》</title>
      <link href="/2019/12/17/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%E3%80%8A%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9045%E8%AE%B2%E6%80%BB%E7%BB%93%E3%80%8B/"/>
      <url>/2019/12/17/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%E3%80%8A%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9045%E8%AE%B2%E6%80%BB%E7%BB%93%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>该讲主要引导读者从全局去了解什么是数据分析？为什么做数据分析？怎么去做数据分析？答案就是：掌握数据，就是掌握规律。当你了解了市场数据，对它进行分析，就可以得到市场规律。当你掌握了产品自身的数据，对它进行分析，就可以了解产品的用户来源、用户画像等等。所以说数据是个全新的视角。数据分析如此重要，它不仅是新时代的“数据结构 + 算法”，也更是企业争夺人才的高地。 谈到数据分析，我们一般都会从3个方面入手：</p><blockquote><p>数据采集 – 数据源，我们要用的原材料</p><p>数据挖掘 – 它可以说是最“高大上”的部分，也是整个商业价值所在。之所以要进行数据分析，就是要找到其中的规律，来指导我们的业务。因此数据挖掘的核心是挖掘数据的商业价值（所谓的商业智能BI）</p><p>数据的可视化 – 数据领域中的万金油，直观了解数据分析结构</p></blockquote><p>　　数据分析的三驾马车的关系如下：</p><p>　　<img alt="img" data-src="https://img2018.cnblogs.com/blog/1169428/201901/1169428-20190119101700106-215720167.png" class="lazyload"></p><p>　　下面来大致认识下这三驾马车：</p><h2 id="2-数据采集："><a href="#2-数据采集：" class="headerlink" title="2.数据采集："></a>2.数据采集：</h2><p>数据的采集，主要是和数据打交道，用工具对数据进行采集，常用的数据源，如何获取它们。在专栏里，后续会将介绍如何掌握“八爪鱼”这个自动抓取的神器，它可以帮你抓取 99% 的页面源。也会教读者如何编写 Python 爬虫。掌握 Python 爬虫的乐趣是无穷的。它不仅能让你获取微博上的热点评论，自动下载例如“王祖贤”的海报，还能自动给微博加粉丝，让你掌握自动化的快感。</p><p>　　<img alt="img" data-src="https://img2018.cnblogs.com/blog/1169428/201901/1169428-20190119102510649-1229981320.png" class="lazyload"></p><h2 id="3-数据挖掘："><a href="#3-数据挖掘：" class="headerlink" title="3.数据挖掘："></a>3.数据挖掘：</h2><p>数据挖掘，它可以说是知识型的工程，相当于整个专栏中的“算法”部分。首先你要知道它的基本流程、十大算法、以及背后的数学基础。</p><p>掌握了数据挖掘，就好比手握水晶球一样，它会通过历史数据，告诉你未来会发生什么。当然它也会告诉你这件事发生的置信度是怎样的。</p><p>　　<img alt="img" data-src="https://img2018.cnblogs.com/blog/1169428/201901/1169428-20190119102828928-1543716662.png" class="lazyload"></p><h2 id="4-数据可视化"><a href="#4-数据可视化" class="headerlink" title="4.数据可视化"></a>4.数据可视化</h2><p> 　为什么说数据要可视化，因为数据往往是隐性的，尤其是当数据量大的时候很难感知，可视化可以帮我们很好地理解这些数据的结构，以及分析结果的呈现。这是一个非常重要的步骤，也是我们特别感兴趣的一个步骤。</p><p> 数据可视化的两种方法：</p><ul><li><p>　Python ：在 Python 对数据进行清洗、挖掘的过程中，很多的库可以使用，像 Matplotlib、Seaborn 等第三方库进行呈现。</p></li><li><p>　第三方工具：如果你已经生成了 csv 格式文件，想要采用所见即所得的方式进行呈现，可以采用微图、DataV、Data GIF Maker 等第三方工具，它们可以很方便地对数据进行处理，还可以帮你制作呈现的效果。</p><p>　<img alt="img" data-src="https://img2018.cnblogs.com/blog/1169428/201901/1169428-20190119103259753-1199946581.png" class="lazyload"></p></li></ul><p>数据分析包括数据采集、数据挖掘、数据可视化这三个部分。乍看你可能觉得东西很多，无从下手，或者感觉数据挖掘涉及好多算法，有点“高深莫测”，掌握起来是不是会吃力。其实这些都是不必要的烦恼。个人觉得只要内心笃定，认为自己一定能做成，学成，其他一切都是“纸老虎”哈。</p><p>再说下，陈博在文章中提到的如何来快速掌握数据分析，核心就是<strong>认知</strong>。我们只有把知识转化为自己的语言，它才真正变成了我们自己的东西。这个转换的过程就是认知升级的过程。</p><p>　　<img alt="img" data-src="https://img2018.cnblogs.com/blog/1169428/201901/1169428-20190119103852266-1630283111.png" class="lazyload"></p><p>　　我本人也是很赞同这种说法，简单一句就是“知行合一”</p><p>　　<strong>总结</strong></p><ul><li><strong>记录下你每天的认知</strong>　　</li><li><strong>这些认知对应工具的哪些操作</strong></li><li><strong>做更多练习来巩固你的认知</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learning Path </category>
          
          <category> Data Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列之决策树算法（01）：决策树特征选择</title>
      <link href="/2019/12/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95%EF%BC%8801%EF%BC%89%EF%BC%9A%E5%86%B3%E7%AD%96%E6%A0%91%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9/"/>
      <url>/2019/12/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95%EF%BC%8801%EF%BC%89%EF%BC%9A%E5%86%B3%E7%AD%96%E6%A0%91%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是特征选择"><a href="#1-什么是特征选择" class="headerlink" title="1.什么是特征选择"></a>1.什么是特征选择</h2><p>【特征选择】顾名思义就是对特征进行选择，以达到提高决策树学习的效率的目的。</p><p>【那么选择的是什么样的特征呢？】这里我们选择的特征需要是<strong>对训练数据有分类能力</strong>的特征，如果一个特征参与分类与否和随机分类的结果差别不大的话，我们就说这个特征<strong>没有分类能力</strong>，舍去这个特征对学习的精度不会有特别大的影响。</p><blockquote><p>特征选择是决定用哪个特征来划分特征空间。</p></blockquote><p>比如女生找男朋友，可能这个女生<strong>首先</strong>会问「这个男生帅不帅」，其次再是「身高如何」、「有无房子」、「收入区间」、「做什么工作」等等，那么「帅否」这个特征就是这位女生心中有着最好分类能力的特征了</p><p>【那怎么判断哪个特征有更好的分类能力呢？】这时候【<strong>信息增益</strong>】就要出场了。</p><h2 id="2-信息增益"><a href="#2-信息增益" class="headerlink" title="2.信息增益"></a>2.信息增益</h2><p>为了解释什么是信息增益，我们首先要讲解一下什么是【<strong>熵（entropy）</strong>】</p><h3 id="熵（Entropy）"><a href="#熵（Entropy）" class="headerlink" title="熵（Entropy）"></a><strong>熵（Entropy）</strong></h3><blockquote><p>在热力学与化学中：</p><p>熵是一种测量在动力学方面【<strong>不能做功的能量的总数</strong>】，当总体熵增加，其<strong>做功能力</strong>也下降，熵的度量是<strong>能量退化</strong>的指标。</p></blockquote><p>1948 年，香农把热力学中的熵引入到信息论中，称为<strong>香农熵</strong>。根据维基百科的描述：</p><blockquote><p>在信息论中，熵是接收的<strong>每条消息</strong>中包含的<strong>信息的平均量</strong>。</p></blockquote><p>更一般的，【<strong>熵表示随机变量的不确定性</strong>】。假设一个有限取值的离散随机变量 X 的概率分布如下：</p><p><img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=P%28X+%3D+x_i%29+%3D+p_i%2C%5C+%5C+%5C+%5C+i+%3D+1%2C+2%2C+%5Ccdots%2C+n" class="lazyload"></p><p>那么它的熵定义为：</p><p><img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=H%28X%29+%3D+-%5Csum_%7Bi%3D1%7D%5En+p_i+%5Clog_%7Bb%7D+p_i" class="lazyload"></p><p>上式中的 b 通常取 2 或者自然对数 <em>e</em>，这时熵的单位就分别称为比特（bit）或纳特（nat），这也是信息论中，信息量的单位。</p><p>从上式中，我们可以看到，<strong>熵与 X 的取值是没有关系的，它只与 X 的分布有关</strong>，所以 H 也可以写作 p 的函数：</p><p><img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=H%28p%29+%3D+-%5Csum_%7Bi%3D1%7D%5En+p_i%5Clog+p_i" class="lazyload"></p><p>我们现在来看两个随机变量的情况。</p><p>假设随机变量 (X, Y) 的联合概率分布如下：</p><p><img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=P%28X+%3D+x_i%2C+Y+%3D+y_j%29+%3D+p_%7Bij%7D%2C%5C+%5C+%5C+%5C+i+%3D+1%2C+2%2C+%5Ccdots%2C+n%3B%5C+j+%3D+1%2C+2%2C+%5Ccdots%2C+m" class="lazyload"></p><p>我们使用<strong>条件熵（conditional entropy）H(Y|X)</strong>来度量在已知随机变量 X 的条件下随机变量 Y 的不确定性。</p><blockquote><p>条件熵定义为：X 给定条件下，Y 的条件概率分布的熵对 X 的数学期望。</p></blockquote><p>是不是看晕了，没关系，我们来看数学公式，这才是最简单直接让你晕过去的方法：</p><p><img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=H%28Y%7CX%29+%3D+%5Csum_%7Bi%3D1%7D%5En+p_i+H%28Y%7CX%3Dx_i%29%2C%5C+%5C+%5C+%5C+p_i+%3D+P%28X%3Dx_i%29%2C%5C+i+%3D+1%2C+2%2C+%5Ccdots%2C+n" class="lazyload"></p><p>有了上面的公式以后，条件熵的定义就非常容易理解了。</p><p>那么这些奇奇怪怪的熵又和我们要讲的信息增益有什么关系呢？</p><h3 id="信息增益的定义与信息增益算法"><a href="#信息增益的定义与信息增益算法" class="headerlink" title="信息增益的定义与信息增益算法"></a>信息增益的定义与信息增益算法</h3><p>既然熵是信息量的一种度量，那么信息增益就是熵的增加咯？</p><p>没错，由于熵表示不确定性，严格来说，<strong>信息增益（information gain）表示的是「得知了特征 X 的信息之后，类别 Y 的信息的不确定性减少的程度」</strong>。</p><p>我们给出信息增益的最终定义：</p><blockquote><p>特征 A 对训练数据集 D 的信息增益 g(D, A)，定义为，集合 D 的经验熵 H(D) 与特征 A 给定条件下 D 的经验条件熵 H(D|A) 之差。</p></blockquote><p><img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=g%28D%2C+A%29+%3D+H%28D%29+-+H%28D%7CA%29" class="lazyload"></p><p><em>这里你只要知道经验熵和经验条件熵就是依据经验（由数据估计特别是极大似然估计）得出来的熵就可以了。</em></p><p>假设我们有一个训练集 D 和一个特征 A，那么，经验熵 H(D) 就是对 D 进行分类的不确定性，经验条件熵 H(D|A) 就是给定 A 后，对 D 分类的不确定性，经验熵 H(D) 与经验条件熵 H(D|A) 的差就是信息增益。</p><p>很明显的，不同的特征有不同的信息增益，信息增益大的特征分类能力更强。我们就是要根据信息增益来选择特征。</p><blockquote><p><strong>ps：信息增益体现了特征的重要性，信息增益越大说明特征越重要</strong></p><p><strong>信息熵体现了信息的不确定程度，熵越大表示特征越不稳定，对于此次的分类，越大表示类别之间的数据差别越大</strong></p><p><strong>条件熵体现了根据该特征分类后的不确定程度，越小说明分类后越稳定</strong></p><p><strong>信息增益=信息熵-条件熵，越大说明熵的变化越大，熵的变化越大越有利于分类</strong></p></blockquote><p>下面我们给出信息增益的算法。</p><p>首先对数据做一些介绍：</p><ul><li>假设我们有一个训练集 D，训练集的总的样本个数即样本容量为 |D|，最后的结果有 K 个类别，每个类别表示为 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=C_k" class="lazyload"> ， <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=%7CC_k%7C" class="lazyload"> 为属于这个类的样本的个数，很显然 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=%5Csum_%7Bk%3D1%7D%5EK+%7CC_k%7C+%3D+%7CD%7C" class="lazyload"> 。</li><li>再假设我们有一个特征叫 A，A 有 n 个不同的取值 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=%5C%7Ba_1%2C+a_2%2C+%5Ccdots%2C+a_n%5C%7D" class="lazyload"> ，那么根据 A 我们可以将 D 分成 n 个子集，每个子集表示为 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=D_i" class="lazyload"> ， <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=%7CD_i%7C" class="lazyload"> 是这个子集的样本个数，很显然 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=%5Csum_%7Bi%3D1%7D%5En+%7CD_i%7C+%3D+%7CD%7C" class="lazyload"> 。</li><li>我们把 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=D_i" class="lazyload"> 中属于类别 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=C_k" class="lazyload"> 的集合称作 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=D_%7Bik%7D%2C%5C+D_%7Bik%7D+%3D+D_i+%5Cbigcap+C_k" class="lazyload"> ， <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=%7CD_%7Bik%7D%7C" class="lazyload"> 是其样本个数。</li></ul><p>信息增益的计算就分为如下几个步骤：</p><ol><li>计算 D 的经验熵 H(D)：</li></ol><p><img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=H%28D%29+%3D+-%5Csum_%7Bk%3D1%7D%5EK+%5Cfrac%7B%7CC_k%7C%7D%7B%7CD%7C%7D+%5Clog_2+%5Cfrac%7B%7CC_k%7C%7D%7B%7CD%7C%7D" class="lazyload"></p><p>\2. 计算 A 对 D 的经验条件熵 H(D|A)：</p><p><img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=H%28D%7CA%29+%3D+%5Csum_%7Bi%3D1%7D%5En+%5Cfrac%7B%7CD_i%7C%7D%7B%7CD%7C%7D+H%28D_i%29+%3D+-+%5Csum_%7Bi%3D1%7D%5En+%5Cfrac%7B%7CD_i%7C%7D%7B%7CD%7C%7D+%5Csum_%7Bk%3D1%7D%5EK+%5Cfrac%7B%7CD_%7Bik%7D%7C%7D%7B%7CD_i%7C%7D+%5Clog_2+%5Cfrac%7B%7CD_%7Bik%7D%7C%7D%7B%7CD_i%7C%7D" class="lazyload"></p><p>\3. 计算信息增益 g(D, A)：</p><p><img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=g%28D%2C+A%29+%3D+H%28D%29+-+H%28D%7CA%29" class="lazyload"></p><h2 id="3-信息增益比"><a href="#3-信息增益比" class="headerlink" title="3.信息增益比"></a>3.信息增益比</h2><p>看到这个小标题，可能有人会问，信息增益我知道了，信息增益比又是个什么玩意儿？</p><p>按照经验来看，【<strong>以信息增益准则来选择划分数据集的特征，其实倾向于选择有更多取值的特征，而有时这种倾向会在决策树的构造时带来一定的误差</strong>】。</p><p><strong>ps：信息增益体现了特征的重要性，信息增益越大说明特征越重要。</strong>类别越多代表特征越不确定，即熵越多，类别的信息增益越小。</p><p>为了校正这一误差，我们引入了【<strong>信息增益比（information gain ratio）</strong>】，又叫做信息增益率，它的定义如下：</p><p>特征 A 对训练数据集 D 的信息增益比 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=g_R%28D%2C+A%29" class="lazyload"> 定义为其信息增益 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=g%28D%2C+A%29" class="lazyload"> 与训练数据集 D 关于特征 A 的值的熵 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=H_A%28D%29" class="lazyload"> 之比。</p><p><img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=g_R%28D%2C+A%29+%3D+%5Cfrac%7Bg%28D%2C+A%29%7D%7BH_A%28D%29%7D" class="lazyload"></p><p>其中， <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=H_A%28D%29+%3D+-%5Csum_%7Bi%3D1%7D%5En+%5Cfrac%7B%7CD_i%7C%7D%7B%7CD%7C%7D+%5Clog_2+%5Cfrac%7B%7CD_i%7C%7D%7B%7CD%7C%7D" class="lazyload"> ，n 是 A 取值的个数。</p><p>两个经典的决策树算法 ID3 算法和 C4.5 算法，分别会采用信息增益和信息增益比作为特征选择的依据。</p><h2 id="4-ID3-：-最大信息增益"><a href="#4-ID3-：-最大信息增益" class="headerlink" title="4. ID3 ： 最大信息增益"></a>4. ID3 ： 最大信息增益</h2><blockquote><p>ID3以信息增益为准则来选择最优划分属性</p></blockquote><p>信息增益的计算要基于信息熵（度量样本集合纯度的指标）</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-e0ce667594401d2f8daf3ee6a7da9151_hd.jpg" class="lazyload">信息熵越小，数据集X的纯度越大</p><p>因此，假设于数据集D上建立决策树，数据有K个类别：</p><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-f6d10699fdbe216617836c7e8732ba58_hd.jpg" class="lazyload"></p><p>公式（1）中：</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-181bbc695d6de40eff56d86518d84f29_hd.jpg" class="lazyload">表示第k类样本的数据占数据集D样本总数的比例</p><p>公式（2）表示的是以特征A作为分割的属性，得到的信息熵：</p><p>Di表示的是以属性A为划分，分成n个分支，第i个分支的节点集合</p><p>因此，该公式求的是以属性A为划分，n个分支的信息熵总和</p><p>公式（3）为分割后与分割前的信息熵的差值，也就是信息增益，越大越好</p><p>但是这种分割算法存在一定的<strong>缺陷</strong>：</p><blockquote><p>假设每个记录有一个属性“ID”，若按照ID来进行分割的话，由于ID是唯一的，因此在这一个属性上，能够取得的特征值等于样本的数目，也就是说ID的特征值很多。那么无论以哪个ID为划分，叶子结点的值只会有一个，纯度很大，得到的信息增益会很大，但这样划分出来的决策树是没意义的。由此可见，<strong>ID3决策树偏向于取值较多的属性进行分割，存在一定的偏好。</strong>为减小这一影响，有学者提出C4.5的分类算法。</p></blockquote><h2 id="5-C4-5-：最大信息增益率"><a href="#5-C4-5-：最大信息增益率" class="headerlink" title="5. C4.5 ：最大信息增益率"></a>5. C4.5 ：<strong>最大信息增益率</strong></h2><blockquote><p>C4.5基于信息增益率准则选择最优分割属性的算法</p></blockquote><p>信息增益比率通过引入一个被称作【<strong>分裂信息(Split information)</strong>】的项来惩罚取值较多的属性。</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-c35719627c479737cb680c3f4d8cdf6d_hd.jpg" class="lazyload"></p><p>上式，<strong>分子计算与ID3一样，分母是由属性A的特征值个数决定的，个数越多，IV值越大，信息增益率越小，这样就可以避免模型偏好特征值多的属性，但是聪明的人一看就会发现，如果简单的按照这个规则来分割，模型又会偏向特征数少的特征</strong>。因此C4.5决策树先从候选划分属性中找出<strong>信息增益高于平均水平</strong>的属性，在从中选择<strong>增益率最高</strong>的。</p><p>对于连续值属性来说，可取值数目不再有限，因此可以采用<strong>离散化技术</strong>（如二分法）进行处理。将属性值从小到大排序，然后选择中间值作为分割点，数值比它小的点被划分到左子树，数值不小于它的点被分到又子树，计算分割的信息增益率，选择信息增益率最大的属性值进行分割。</p><h2 id="6-CART-：最小基尼指数"><a href="#6-CART-：最小基尼指数" class="headerlink" title="6.CART ：最小基尼指数"></a>6.CART ：<strong>最小基尼指数</strong></h2><blockquote><p>CART以基尼系数为准则选择最优划分属性，可以应用于分类和回归</p></blockquote><p>CART是一棵<strong>二叉树</strong>，采用【<strong>二元切分法</strong>】，每次把数据切成两份，分别进入左子树、右子树。而且每个非叶子节点都有两个孩子，所以CART的叶子节点比非叶子多1。相比ID3和C4.5，CART应用要多一些，<strong>既可以用于分类也可以用于回归</strong>。CART分类时，使用<strong>基尼指数（Gini）</strong>来选择最好的数据分割的特征，gini描述的是纯度，与信息熵的含义相似。<strong>CART中每一次迭代都会降低GINI系数。</strong></p><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-79214da261d75829046953ab9cb8b03a_hd.jpg" class="lazyload">Di表示以A是属性值划分成n个分支里的数目</p><p>Gini(D)反映了数据集D的纯度，值越小，纯度越高。我们在候选集合中选择使得划分后<strong>基尼指数最小的属性作为最优化分属性。</strong></p><h3 id="7-分类树和回归树"><a href="#7-分类树和回归树" class="headerlink" title="7.分类树和回归树"></a>7.<strong>分类树和回归树</strong></h3><p>提到决策树算法，很多想到的就是上面提到的ID3、C4.5、CART分类决策树。其实决策树分为分类树和回归树，前者用于分类，如晴天/阴天/雨天、用户性别、邮件是否是垃圾邮件，后者用于预测实数值，如明天的温度、用户的年龄等。</p><p>作为对比，先说分类树，我们知道ID3、C4.5分类树在每次分枝时，是穷举每一个特征属性的每一个阈值，找到使得按照feature&lt;=阈值，和feature&gt;阈值分成的两个分枝的熵最大的feature和阈值。按照该标准分枝得到两个新节点，用同样方法继续分枝直到所有人都被分入性别唯一的叶子节点，或达到预设的终止条件，若最终叶子节点中的性别不唯一，则以多数人的性别作为该叶子节点的性别。</p><p>回归树总体流程也是类似，不过在每个节点（不一定是叶子节点）都会得一个预测值，以年龄为例，该预测值等于属于这个节点的所有人年龄的平均值。分枝时穷举每一个feature的每个阈值找最好的分割点，但衡量最好的标准不再是最大熵，而是最小化均方差–即（每个人的年龄-预测年龄）^2 的总和 / N，或者说是每个人的预测误差平方和 除以 N。这很好理解，被预测出错的人数越多，错的越离谱，均方差就越大，通过最小化均方差能够找到最靠谱的分枝依据。分枝直到每个叶子节点上人的年龄都唯一（这太难了）或者达到预设的终止条件（如叶子个数上限），若最终叶子节点上人的年龄不唯一，则以该节点上所有人的平均年龄做为该叶子节点的预测年龄。</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> Decision Tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Decision Tree </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
